#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de validation rapide pour v√©rifier que toutes les fonctionnalit√©s
de l'interface Fault Editor ont √©t√© correctement restaur√©es.

Usage: python validate_restoration.py

Author: AI Assistant
Created: 2024
"""

import sys
import os
import tkinter as tk
from tkinter import ttk

def check_imports():
    """V√©rifier que tous les imports fonctionnent."""
    print("üîç V√©rification des imports...")

    try:
        from main_controller import FaultEditorController
        print("  ‚úÖ main_controller.FaultEditorController")

        from app import FaultEditor
        print("  ‚úÖ app.FaultEditor")

        from config.constants import Colors, Fonts, Messages, Dimensions
        print("  ‚úÖ config.constants")

        from models.data_models import ApplicationState
        print("  ‚úÖ models.data_models")

        return True
    except ImportError as e:
        print(f"  ‚ùå Erreur d'import: {e}")
        return False

def check_interface_creation():
    """V√©rifier que l'interface peut √™tre cr√©√©e sans erreur."""
    print("\nüèóÔ∏è V√©rification de la cr√©ation d'interface...")

    try:
        # Cr√©er une fen√™tre test (cach√©e)
        root = tk.Tk()
        root.withdraw()

        # Tester la cr√©ation du controller
        from main_controller import FaultEditorController
        controller = FaultEditorController(root)
        print("  ‚úÖ FaultEditorController cr√©√© avec succ√®s")

        # Tester la cr√©ation du wrapper legacy
        from app import FaultEditor
        editor = FaultEditor(root)
        print("  ‚úÖ FaultEditor (wrapper) cr√©√© avec succ√®s")

        root.destroy()
        return True

    except Exception as e:
        print(f"  ‚ùå Erreur lors de la cr√©ation: {e}")
        return False

def check_required_attributes():
    """V√©rifier que tous les attributs requis sont pr√©sents."""
    print("\nüìã V√©rification des attributs requis...")

    try:
        root = tk.Tk()
        root.withdraw()

        from main_controller import FaultEditorController
        controller = FaultEditorController(root)

        # Liste des attributs critiques de l'interface originale
        required_attrs = {
            'lang': 'Langue courante',
            'file_map': 'Mapping des fichiers',
            'data_map': 'Donn√©es charg√©es',
            'path_map': 'Mapping des chemins',
            'columns': 'Liste des colonnes',
            'current_path': 'Chemin courant',
            'base_dir': 'Dossier de base',
            'search_results': 'R√©sultats de recherche',
            'main_canvas': 'Canvas principal',
            'columns_frame': 'Frame des colonnes',
            'tools_frame': 'Frame des outils',
            'status': 'Barre de statut',
            'lang_var': 'Variable de langue',
            'sync_one_var': 'Variable sync un fichier',
            'genfichier_file_var': 'Variable g√©n√©ration fichier',
            'genfichier_src_var': 'Variable langue source',
            'genfichier_tgt_var': 'Variable langue cible'
        }

        missing_attrs = []
        for attr, description in required_attrs.items():
            if hasattr(controller, attr):
                print(f"  ‚úÖ {attr} - {description}")
            else:
                print(f"  ‚ùå {attr} - {description}")
                missing_attrs.append(attr)

        root.destroy()

        if missing_attrs:
            print(f"\n‚ö†Ô∏è Attributs manquants: {missing_attrs}")
            return False
        else:
            print(f"\n‚úÖ Tous les {len(required_attrs)} attributs requis sont pr√©sents")
            return True

    except Exception as e:
        print(f"  ‚ùå Erreur lors de la v√©rification: {e}")
        return False

def check_required_methods():
    """V√©rifier que toutes les m√©thodes requises sont pr√©sentes."""
    print("\nüîß V√©rification des m√©thodes requises...")

    try:
        root = tk.Tk()
        root.withdraw()

        from main_controller import FaultEditorController
        controller = FaultEditorController(root)

        # Liste des m√©thodes critiques de l'interface originale
        required_methods = {
            'setup_ui': 'Configuration interface',
            'open_folder': 'Ouverture dossier',
            'load_flat_json': 'Chargement JSON plat',
            'show_search': 'Affichage recherche',
            'reload_lang': 'Rechargement langue',
            'run_sync_all': 'Synchronisation tous',
            'run_sync_one': 'Synchronisation un',
            'run_generer_fichier': 'G√©n√©ration fichier',
            'run_generer_manquant': 'G√©n√©ration manquants',
            'run_check_coherence': 'V√©rification coh√©rence',
            'run_spell_check': 'V√©rification orthographe',
            'perform_search': 'Ex√©cution recherche',
            'search_next': 'Recherche suivant',
            'search_previous': 'Recherche pr√©c√©dent',
            'reload_root': 'Rechargement racine',
            'initialize_file_map': 'Initialisation file_map',
            'load_root': 'Chargement racine',
            'load_data_for_current_language': 'Chargement donn√©es langue'
        }

        missing_methods = []
        for method, description in required_methods.items():
            if hasattr(controller, method) and callable(getattr(controller, method)):
                print(f"  ‚úÖ {method}() - {description}")
            else:
                print(f"  ‚ùå {method}() - {description}")
                missing_methods.append(method)

        root.destroy()

        if missing_methods:
            print(f"\n‚ö†Ô∏è M√©thodes manquantes: {missing_methods}")
            return False
        else:
            print(f"\n‚úÖ Toutes les {len(required_methods)} m√©thodes requises sont pr√©sentes")
            return True

    except Exception as e:
        print(f"  ‚ùå Erreur lors de la v√©rification: {e}")
        return False

def check_ui_components():
    """V√©rifier que les composants UI sont correctement cr√©√©s."""
    print("\nüé® V√©rification des composants UI...")

    try:
        root = tk.Tk()
        root.withdraw()

        from main_controller import FaultEditorController
        controller = FaultEditorController(root)

        # V√©rifier les composants UI principaux
        ui_checks = {
            'main_canvas': 'Canvas principal cr√©√©',
            'columns_frame': 'Frame des colonnes cr√©√©',
            'tools_frame': 'Barre d\'outils cr√©√©e',
            'status': 'Barre de statut cr√©√©e',
            'scrollbar_x': 'Scrollbar horizontale cr√©√©e'
        }

        all_good = True
        for component, description in ui_checks.items():
            if hasattr(controller, component):
                widget = getattr(controller, component)
                if widget and hasattr(widget, 'winfo_exists'):
                    print(f"  ‚úÖ {description}")
                else:
                    print(f"  ‚ùå {description} - Widget invalide")
                    all_good = False
            else:
                print(f"  ‚ùå {description} - Composant manquant")
                all_good = False

        # V√©rifier les variables tkinter
        var_checks = {
            'lang_var': 'Variable de langue',
            'sync_one_var': 'Variable sync un',
            'genfichier_file_var': 'Variable fichier g√©n√©ration',
            'genfichier_src_var': 'Variable source g√©n√©ration',
            'genfichier_tgt_var': 'Variable cible g√©n√©ration'
        }

        for var, description in var_checks.items():
            if hasattr(controller, var):
                var_obj = getattr(controller, var)
                if hasattr(var_obj, 'get'):  # C'est une variable tkinter
                    print(f"  ‚úÖ {description}")
                else:
                    print(f"  ‚ùå {description} - Pas une variable tkinter")
                    all_good = False
            else:
                print(f"  ‚ùå {description} - Variable manquante")
                all_good = False

        root.destroy()
        return all_good

    except Exception as e:
        print(f"  ‚ùå Erreur lors de la v√©rification UI: {e}")
        return False

def check_legacy_compatibility():
    """V√©rifier la compatibilit√© avec l'interface legacy."""
    print("\nüîÑ V√©rification de la compatibilit√© legacy...")

    try:
        root = tk.Tk()
        root.withdraw()

        from app import FaultEditor
        editor = FaultEditor(root)

        # V√©rifier que les attributs principaux sont accessibles
        legacy_attrs = ['lang', 'file_map', 'base_dir', 'search_results', 'columns']

        all_good = True
        for attr in legacy_attrs:
            if hasattr(editor, attr):
                print(f"  ‚úÖ {attr} accessible via wrapper")
            else:
                print(f"  ‚ùå {attr} non accessible via wrapper")
                all_good = False

        # V√©rifier que les m√©thodes principales sont accessibles
        legacy_methods = ['open_folder', 'load_flat_json', 'show_search', 'reload_lang']

        for method in legacy_methods:
            if hasattr(editor, method) and callable(getattr(editor, method)):
                print(f"  ‚úÖ {method}() accessible via wrapper")
            else:
                print(f"  ‚ùå {method}() non accessible via wrapper")
                all_good = False

        root.destroy()
        return all_good

    except Exception as e:
        print(f"  ‚ùå Erreur lors de la v√©rification legacy: {e}")
        return False

def main():
    """Ex√©cuter tous les tests de validation."""
    print("üöÄ VALIDATION DE LA RESTAURATION FAULT EDITOR")
    print("=" * 50)

    tests = [
        ("Imports", check_imports),
        ("Cr√©ation d'interface", check_interface_creation),
        ("Attributs requis", check_required_attributes),
        ("M√©thodes requises", check_required_methods),
        ("Composants UI", check_ui_components),
        ("Compatibilit√© legacy", check_legacy_compatibility)
    ]

    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        result = test_func()
        results.append((test_name, result))

    # R√©sum√© final
    print("\n" + "="*50)
    print("üìä R√âSUM√â DES TESTS")
    print("="*50)

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")

    print(f"\nüìà Score: {passed}/{total} tests r√©ussis")

    if passed == total:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS!")
        print("‚úÖ La restauration de l'interface Fault Editor est COMPL√àTE")
        print("üöÄ L'application est pr√™te pour la production")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total - passed} test(s) ont √©chou√©")
        print("üîß Veuillez v√©rifier les composants manquants")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Test interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script pour v√©rifier et corriger l'orthographe dans les fichiers JSON fran√ßais.
"""

import os
import json
import re
import argparse
from typing import Dict, List, Tuple

# Dictionnaire des corrections orthographiques courantes
CORRECTIONS_ORTHOGRAPHE = {
    # Fautes d'accents
    "arret": "arr√™t",
    "Arret": "Arr√™t",
    "ARRET": "ARR√äT",
    "arrets": "arr√™ts",
    "Arrets": "Arr√™ts",
    "ARRETS": "ARR√äTS",

    # Fautes de grammaire et conjugaison
    "reconnue": "reconnu",  # pour "Mouvement AMR non reconnue" -> "reconnu"
    "enonce": "√©nonc√©",
    "Enonce": "√ânonc√©",
    "detecte": "d√©tect√©",
    "Detecte": "D√©tect√©",
    "detectee": "d√©tect√©e",
    "Detectee": "D√©tect√©e",
    "connecte": "connect√©",
    "Connecte": "Connect√©",
    "connectee": "connect√©e",
    "Connectee": "Connect√©e",

    # Fautes d'apostrophes
    "d'urgence": "d'urgence",  # V√©rification apostrophe typographique
    "l'urgence": "l'urgence",
    "s'arrete": "s'arr√™te",
    "n'est": "n'est",
    "n'a": "n'a",
    "n'ont": "n'ont",

    # Fautes courantes techniques
    "contacteur": "contacteur",  # D√©j√† correct
    "aux.": "aux.",  # Abr√©viation correcte
    "desynchronisation": "d√©synchronisation",
    "Desynchronisation": "D√©synchronisation",
    "synchronisation": "synchronisation",
    "Synchronisation": "Synchronisation",

    # Autres corrections courantes
    "defaut": "d√©faut",
    "Defaut": "D√©faut",
    "defauts": "d√©fauts",
    "Defauts": "D√©fauts",
    "echec": "√©chec",
    "Echec": "√âchec",
    "echoue": "√©chou√©",
    "Echoue": "√âchou√©",
    "donnee": "donn√©e",
    "Donnee": "Donn√©e",
    "donnees": "donn√©es",
    "Donnees": "Donn√©es",
    "indisponible": "indisponible",
    "Indisponible": "Indisponible",
    "verifier": "v√©rifier",
    "Verifier": "V√©rifier",
    "verification": "v√©rification",
    "Verification": "V√©rification",
    "capteur": "capteur",
    "Capteur": "Capteur",
    "capteurs": "capteurs",
    "Capteurs": "Capteurs",
    "detecteur": "d√©tecteur",
    "Detecteur": "D√©tecteur",
    "detecteurs": "d√©tecteurs",
    "Detecteurs": "D√©tecteurs",
    "peripherique": "p√©riph√©rique",
    "Peripherique": "P√©riph√©rique",
    "peripheriques": "p√©riph√©riques",
    "Peripheriques": "P√©riph√©riques",
    "cable": "c√¢ble",
    "Cable": "C√¢ble",
    "cables": "c√¢bles",
    "Cables": "C√¢bles",
    "controle": "contr√¥le",
    "Controle": "Contr√¥le",
    "controles": "contr√¥les",
    "Controles": "Contr√¥les",
    "probleme": "probl√®me",
    "Probleme": "Probl√®me",
    "problemes": "probl√®mes",
    "Problemes": "Probl√®mes",
    "systeme": "syst√®me",
    "Systeme": "Syst√®me",
    "systemes": "syst√®mes",
    "Systemes": "Syst√®mes",
    "memoire": "m√©moire",
    "Memoire": "M√©moire",
    "memoires": "m√©moires",
    "Memoires": "M√©moires",
    "parametre": "param√®tre",
    "Parametre": "Param√®tre",
    "parametres": "param√®tres",
    "Parametres": "Param√®tres",
    "temperature": "temp√©rature",
    "Temperature": "Temp√©rature",
    "temperatures": "temp√©ratures",
    "Temperatures": "Temp√©ratures",
    "batterie": "batterie",
    "Batterie": "Batterie",
    "batteries": "batteries",
    "Batteries": "Batteries",
    "camera": "cam√©ra",
    "Camera": "Cam√©ra",
    "cameras": "cam√©ras",
    "Cameras": "Cam√©ras",
    "numero": "num√©ro",
    "Numero": "Num√©ro",
    "numeros": "num√©ros",
    "Numeros": "Num√©ros",
    "reponse": "r√©ponse",
    "Reponse": "R√©ponse",
    "reponses": "r√©ponses",
    "Reponses": "R√©ponses",
    "requete": "requ√™te",
    "Requete": "Requ√™te",
    "requetes": "requ√™tes",
    "Requetes": "Requ√™tes",
    "cree": "cr√©√©",
    "Cree": "Cr√©√©",
    "creee": "cr√©√©e",
    "Creee": "Cr√©√©e",
    "supprime": "supprim√©",
    "Supprime": "Supprim√©",
    "supprimee": "supprim√©e",
    "Supprimee": "Supprim√©e",
    "modifie": "modifi√©",
    "Modifie": "Modifi√©",
    "modifiee": "modifi√©e",
    "Modifiee": "Modifi√©e",
    "valide": "valid√©",
    "Valide": "Valid√©",
    "validee": "valid√©e",
    "Validee": "Valid√©e",
    "configure": "configur√©",
    "Configure": "Configur√©",
    "configuree": "configur√©e",
    "Configuree": "Configur√©e",
    "initialise": "initialis√©",
    "Initialise": "Initialis√©",
    "initialisee": "initialis√©e",
    "Initialisee": "Initialis√©e",
    "termine": "termin√©",
    "Termine": "Termin√©",
    "terminee": "termin√©e",
    "Terminee": "Termin√©e",
    "active": "activ√©",
    "Active": "Activ√©",
    "activee": "activ√©e",
    "Activee": "Activ√©e",
    "desactive": "d√©sactiv√©",
    "Desactive": "D√©sactiv√©",
    "desactivee": "d√©sactiv√©e",
    "Desactivee": "D√©sactiv√©e",
    "bloque": "bloqu√©",
    "Bloque": "Bloqu√©",
    "bloquee": "bloqu√©e",
    "Bloquee": "Bloqu√©e",
    "debloque": "d√©bloqu√©",
    "Debloque": "D√©bloqu√©",
    "debloquee": "d√©bloqu√©e",
    "Debloquee": "D√©bloqu√©e",
    "lance": "lanc√©",
    "Lance": "Lanc√©",
    "lancee": "lanc√©e",
    "Lancee": "Lanc√©e",

    # Corrections sp√©cifiques au contexte AGV/robotique
    "balayeur": "balayeur",  # D√©j√† correct
    "encodeur": "encodeur",  # D√©j√† correct
    "moteur": "moteur",
    "Moteur": "Moteur",
    "moteurs": "moteurs",
    "Moteurs": "Moteurs",
    "actionneur": "actionneur",
    "Actionneur": "Actionneur",
    "actionneurs": "actionneurs",
    "Actionneurs": "Actionneurs",
    "roue": "roue",
    "Roue": "Roue",
    "roues": "roues",
    "Roues": "Roues",
    "direction": "direction",
    "Direction": "Direction",
    "directions": "directions",
    "Directions": "Directions",
    "navigation": "navigation",
    "Navigation": "Navigation",
    "position": "position",
    "Position": "Position",
    "positions": "positions",
    "Positions": "Positions",
    "localisation": "localisation",
    "Localisation": "Localisation",
    "chargeur": "chargeur",
    "Chargeur": "Chargeur",
    "chargeurs": "chargeurs",
    "Chargeurs": "Chargeurs",
    "charge": "charge",
    "Charge": "Charge",
    "charges": "charges",
    "Charges": "Charges",
    "decharge": "d√©charge",
    "Decharge": "D√©charge",
    "decharges": "d√©charges",
    "Decharges": "D√©charges",
    "securite": "s√©curit√©",
    "Securite": "S√©curit√©",
    "urgence": "urgence",
    "Urgence": "Urgence",
    "vehicule": "v√©hicule",
    "Vehicule": "V√©hicule",
    "vehicules": "v√©hicules",
    "Vehicules": "V√©hicules",
    "accessoire": "accessoire",
    "Accessoire": "Accessoire",
    "accessoires": "accessoires",
    "Accessoires": "Accessoires",

    # Corrections pour les distances et unit√©s
    "metre": "m√®tre",
    "Metre": "M√®tre",
    "metres": "m√®tres",
    "Metres": "M√®tres",
    "centimetre": "centim√®tre",
    "Centimetre": "Centim√®tre",
    "centimetres": "centim√®tres",
    "Centimetres": "Centim√®tres",
    "degre": "degr√©",
    "Degre": "Degr√©",
    "degres": "degr√©s",
    "Degres": "Degr√©s",

    # Pr√©positions et articles
    "a distance": "√† distance",
    "A distance": "√Ä distance",
    "a l'arret": "√† l'arr√™t",
    "A l'arret": "√Ä l'arr√™t",
    "a l'arr√™t": "√† l'arr√™t",
    "A l'arr√™t": "√Ä l'arr√™t",
}

# Corrections sp√©ciales (regex patterns)
CORRECTIONS_REGEX = [
    # Correction accord masculin/f√©minin pour certains contextes
    (r'\bmouvement\s+\w+\s+non\s+reconnue\b', lambda m: m.group(0).replace('reconnue', 'reconnu')),
    (r'\bversion\s+\w+\s+\w+\s+non\s+reconnue\b', lambda m: m.group(0).replace('reconnue', 'reconnue')),  # Version peut rester f√©minin

    # Correction des espaces avant les deux-points
    (r'\s+:', ':'),

    # Correction des guillemets
    (r'"([^"]*)"', r'¬´ \1 ¬ª'),  # Optionnel : conversion en guillemets fran√ßais
]

class VerificateurOrthographe:
    def __init__(self):
        self.corrections_appliquees = []
        self.fichiers_modifies = []

    def corriger_texte(self, texte: str) -> Tuple[str, List[str]]:
        """Corrige l'orthographe d'un texte et retourne le texte corrig√© et la liste des corrections."""
        if not texte or not texte.strip():
            return texte, []

        texte_original = texte
        corrections_locales = []

        # Appliquer les corrections simples
        for incorrect, correct in CORRECTIONS_ORTHOGRAPHE.items():
            if incorrect in texte:
                ancien_texte = texte
                texte = texte.replace(incorrect, correct)
                if texte != ancien_texte:
                    corrections_locales.append(f"'{incorrect}' ‚Üí '{correct}'")

        # Appliquer les corrections regex
        for pattern, replacement in CORRECTIONS_REGEX:
            if isinstance(replacement, str):
                nouveau_texte = re.sub(pattern, replacement, texte, flags=re.IGNORECASE)
            else:
                nouveau_texte = re.sub(pattern, replacement, texte, flags=re.IGNORECASE)

            if nouveau_texte != texte:
                corrections_locales.append(f"Pattern '{pattern}' appliqu√©")
                texte = nouveau_texte

        return texte, corrections_locales

    def verifier_fichier_json(self, filepath: str) -> bool:
        """V√©rifie et corrige un fichier JSON fran√ßais."""
        try:
            print(f"üîç V√©rification de {os.path.basename(filepath)}")

            # Charger le fichier JSON
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)

            modifications = False
            corrections_fichier = []

            # V√©rifier les descriptions dans FaultDetailList
            if "FaultDetailList" in data:
                for i, fault in enumerate(data["FaultDetailList"]):
                    if "Description" in fault and fault["Description"]:
                        description_originale = fault["Description"]
                        description_corrigee, corrections = self.corriger_texte(description_originale)

                        if description_corrigee != description_originale:
                            fault["Description"] = description_corrigee
                            modifications = True
                            correction_info = {
                                "fichier": os.path.basename(filepath),
                                "index": i,
                                "avant": description_originale,
                                "apr√®s": description_corrigee,
                                "corrections": corrections
                            }
                            corrections_fichier.append(correction_info)
                            self.corrections_appliquees.append(correction_info)

            # Sauvegarder si des modifications ont √©t√© faites
            if modifications:
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

                self.fichiers_modifies.append(filepath)
                print(f"  ‚úÖ {len(corrections_fichier)} correction(s) appliqu√©e(s)")

                # Afficher les corrections
                for correction in corrections_fichier:
                    print(f"    ‚Ä¢ Index {correction['index']}: '{correction['avant']}' ‚Üí '{correction['apr√®s']}'")
                    if correction['corrections']:
                        print(f"      D√©tails: {', '.join(correction['corrections'])}")

                return True
            else:
                print(f"  ‚úì Aucune correction n√©cessaire")
                return False

        except Exception as e:
            print(f"  ‚ùå Erreur lors de la v√©rification de {filepath}: {e}")
            return False

    def generer_rapport(self) -> str:
        """G√©n√®re un rapport des corrections effectu√©es."""
        rapport = []
        rapport.append("# RAPPORT DE CORRECTION ORTHOGRAPHIQUE")
        rapport.append("=" * 50)
        rapport.append(f"Fichiers modifi√©s: {len(self.fichiers_modifies)}")
        rapport.append(f"Total corrections: {len(self.corrections_appliquees)}")
        rapport.append("")

        if self.corrections_appliquees:
            rapport.append("## D√âTAIL DES CORRECTIONS")
            rapport.append("-" * 30)

            fichiers_groupes = {}
            for correction in self.corrections_appliquees:
                fichier = correction["fichier"]
                if fichier not in fichiers_groupes:
                    fichiers_groupes[fichier] = []
                fichiers_groupes[fichier].append(correction)

            for fichier, corrections in fichiers_groupes.items():
                rapport.append(f"\n### {fichier}")
                for correction in corrections:
                    rapport.append(f"  Index {correction['index']}:")
                    rapport.append(f"    AVANT: {correction['avant']}")
                    rapport.append(f"    APR√àS: {correction['apr√®s']}")
                    if correction['corrections']:
                        rapport.append(f"    D√âTAILS: {', '.join(correction['corrections'])}")

        return "\n".join(rapport)

def main():
    parser = argparse.ArgumentParser(description='V√©rifier et corriger l\'orthographe dans les fichiers JSON fran√ßais')
    parser.add_argument('base_dir', help='R√©pertoire de base contenant les fichiers JSON')
    parser.add_argument('--dry-run', action='store_true', help='Afficher les corrections sans les appliquer')
    parser.add_argument('--rapport', help='Fichier pour sauvegarder le rapport de corrections')

    args = parser.parse_args()

    if not os.path.exists(args.base_dir):
        print(f"‚ùå R√©pertoire introuvable : {args.base_dir}")
        return 1

    print(f"üîç Recherche des fichiers JSON fran√ßais dans : {args.base_dir}")

    # Trouver tous les fichiers JSON fran√ßais
    fichiers_fr = []
    for root, dirs, files in os.walk(args.base_dir):
        for file in files:
            if file.endswith('_fr.json'):
                fichiers_fr.append(os.path.join(root, file))

    if not fichiers_fr:
        print("‚ùå Aucun fichier JSON fran√ßais trouv√©")
        return 1

    print(f"üìÅ {len(fichiers_fr)} fichiers JSON fran√ßais trouv√©s")

    if args.dry_run:
        print("üîç MODE SIMULATION (dry-run) - Aucune modification ne sera effectu√©e")

    verificateur = VerificateurOrthographe()

    # Traiter chaque fichier
    for i, fichier in enumerate(fichiers_fr, 1):
        print(f"\n[{i}/{len(fichiers_fr)}] {os.path.relpath(fichier, args.base_dir)}")

        if not args.dry_run:
            verificateur.verifier_fichier_json(fichier)
        else:
            # Mode simulation - juste v√©rifier sans modifier
            try:
                with open(fichier, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                corrections_simulees = []
                if "FaultDetailList" in data:
                    for j, fault in enumerate(data["FaultDetailList"]):
                        if "Description" in fault and fault["Description"]:
                            description_originale = fault["Description"]
                            description_corrigee, corrections = verificateur.corriger_texte(description_originale)

                            if description_corrigee != description_originale:
                                corrections_simulees.append({
                                    "index": j,
                                    "avant": description_originale,
                                    "apr√®s": description_corrigee,
                                    "corrections": corrections
                                })

                if corrections_simulees:
                    print(f"  üîç {len(corrections_simulees)} correction(s) possible(s):")
                    for correction in corrections_simulees:
                        print(f"    ‚Ä¢ Index {correction['index']}: '{correction['avant']}' ‚Üí '{correction['apr√®s']}'")
                else:
                    print(f"  ‚úì Aucune correction n√©cessaire")

            except Exception as e:
                print(f"  ‚ùå Erreur lors de la lecture de {fichier}: {e}")

    # G√©n√©rer et afficher le rapport
    if not args.dry_run:
        print(f"\nüìä R√âSUM√â:")
        print(f"   ‚úÖ Fichiers modifi√©s : {len(verificateur.fichiers_modifies)}")
        print(f"   üîß Total corrections : {len(verificateur.corrections_appliquees)}")

        if verificateur.corrections_appliquees:
            rapport = verificateur.generer_rapport()
            print(f"\n{rapport}")

            if args.rapport:
                with open(args.rapport, 'w', encoding='utf-8') as f:
                    f.write(rapport)
                print(f"\nüíæ Rapport sauvegard√© dans : {args.rapport}")

        if verificateur.fichiers_modifies:
            print("üéâ Corrections orthographiques termin√©es avec succ√®s !")
        else:
            print("‚úÖ Aucune correction orthographique n√©cessaire")

    return 0

if __name__ == "__main__":
    exit(main())

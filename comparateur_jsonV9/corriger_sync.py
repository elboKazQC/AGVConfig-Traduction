#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script pour corriger les probl√®mes de synchronisation o√π des entr√©es vides
dans le fichier fran√ßais master g√©n√®rent quand m√™me des traductions.
"""

import os
import json
import argparse
from datetime import datetime

def corriger_synchronisation(fichier_fr_path):
    """
    Corrige les probl√®mes de synchronisation pour un fichier fran√ßais donn√©.

    Args:
        fichier_fr_path: Chemin vers le fichier fran√ßais master
    """
    if not os.path.exists(fichier_fr_path):
        print(f"‚ùå Fichier source introuvable : {fichier_fr_path}")
        return False

    # D√©terminer les fichiers cibles
    basename = os.path.basename(fichier_fr_path)
    if not basename.endswith('_fr.json'):
        print(f"‚ùå Le fichier doit √™tre un fichier fran√ßais (_fr.json) : {basename}")
        return False

    fichier_en_path = fichier_fr_path.replace('_fr.json', '_en.json')
    fichier_es_path = fichier_fr_path.replace('_fr.json', '_es.json')

    try:
        # Charger le fichier fran√ßais master
        with open(fichier_fr_path, 'r', encoding='utf-8') as f:
            data_fr = json.load(f)

        print(f"‚úÖ Fichier fran√ßais charg√© : {basename}")

        # Traiter les fichiers anglais et espagnol
        for lang, target_path in [('en', fichier_en_path), ('es', fichier_es_path)]:
            if not os.path.exists(target_path):
                print(f"‚ö†Ô∏è Fichier {lang} introuvable : {os.path.basename(target_path)}")
                continue

            # Charger le fichier cible
            with open(target_path, 'r', encoding='utf-8') as f:
                data_target = json.load(f)

            modifications = 0
            fault_list_fr = data_fr.get("FaultDetailList", [])
            fault_list_target = data_target.get("FaultDetailList", [])

            # V√©rifier chaque entr√©e
            for i, fault_fr in enumerate(fault_list_fr):
                if i >= len(fault_list_target):
                    break

                desc_fr = fault_fr.get("Description", "").strip()
                desc_target = fault_list_target[i].get("Description", "").strip()

                # Si l'entr√©e fran√ßaise est vide mais la traduction ne l'est pas
                if not desc_fr and desc_target:
                    print(f"üîß Correction [{lang.upper()}][index {i}] : '{desc_target}' ‚Üí ''")
                    fault_list_target[i]["Description"] = ""
                    modifications += 1

                # Cas sp√©cial : "chat" doit √™tre traduit correctement
                elif desc_fr == "chat":
                    correct_translation = "cat" if lang == "en" else "gato"
                    if desc_target != correct_translation:
                        print(f"üîß Correction traduction [{lang.upper()}][index {i}] : '{desc_target}' ‚Üí '{correct_translation}'")
                        fault_list_target[i]["Description"] = correct_translation
                        modifications += 1

            # Sauvegarder si des modifications ont √©t√© faites
            if modifications > 0:
                # Cr√©er une sauvegarde
                backup_path = target_path.replace('.json', f'_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
                with open(backup_path, 'w', encoding='utf-8') as f:
                    json.dump(data_target, f, ensure_ascii=False, indent=2)
                print(f"üì¶ Sauvegarde cr√©√©e : {os.path.basename(backup_path)}")

                # Sauvegarder le fichier corrig√©
                with open(target_path, 'w', encoding='utf-8') as f:
                    json.dump(data_target, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ Fichier {lang} corrig√© ({modifications} modifications) : {os.path.basename(target_path)}")
            else:
                print(f"‚úÖ Fichier {lang} d√©j√† correct : {os.path.basename(target_path)}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de la correction : {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description='Corrige les probl√®mes de synchronisation o√π des entr√©es vides g√©n√®rent des traductions'
    )
    parser.add_argument('fichier_fr', help='Chemin vers le fichier fran√ßais master √† corriger')

    args = parser.parse_args()

    success = corriger_synchronisation(args.fichier_fr)
    exit(0 if success else 1)

if __name__ == "__main__":
    main()

import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import os
import json
import subprocess
from functools import partial
from translate import traduire
import re
import logging
from datetime import datetime

# Cr√©er le dossier logs s'il n'existe pas
os.makedirs('logs', exist_ok=True)

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.FileHandler('logs/app_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# D√©finition des constantes (couleurs, polices, largeur minimale, etc.)
COL_BG_MAIN      = "#2a2a2a"  # Fond principal plus fonc√©
COL_BG_TOPBAR    = "#1c1c1c"  # Barre sup√©rieure plus fonc√©e
COL_BG_COLUMN    = "#2a2a2a"  # Colonnes plus fonc√©es
COL_BG_ROW       = "#333333"  # Lignes plus fonc√©es
COL_BG_ROW_ALT   = "#3a3a3a"  # Lignes altern√©es plus fonc√©es
COL_BG_ROW_HOVER = "#404040"  # Survol plus fonc√©
COL_FG_TEXT      = "#ffffff"  # Texte blanc
COL_EDIT_BG      = "#404040"  # Fond d'√©dition plus fonc√©
COL_EDIT_FG      = "#ffffff"  # Texte d'√©dition blanc
COL_EDIT_BG_FOCUS = "#505050"  # Fond d'√©dition avec focus
COL_GREEN        = "#4caf50"  # Vert pour les √©l√©ments extensibles
COL_RED          = "#f44336"  # Rouge pour les alertes
COL_AMBER        = "#ffc107"  # Ambre pour les avertissements
COL_HIGHLIGHT    = "#505050"  # Contour de survol plus visible
COL_SEARCH_HIGHLIGHT = "#ffab00"  # Couleur de surbrillance pour la recherche
COL_SEARCH_BG = "#3a3a3a"  # Fond pour la barre de recherche

FONT_DEFAULT = ("Segoe UI", 11)
FONT_TOPBAR  = ("Segoe UI", 12, "bold")
FONT_TITLE   = ("Segoe UI", 14, "bold")

MIN_COL_WIDTH = 400

# Styles pour les alarmes
ALARM_STYLES = {
    "error": {"bg": "#f44336", "fg": "#ffffff"},
    "warning": {"bg": "#ffc107", "fg": "#000000"},
    "info": {"bg": "#2196f3", "fg": "#ffffff"},
    "success": {"bg": "#4caf50", "fg": "#ffffff"}
}

class FaultEditor:
    def __init__(self, root):
        logger.info("D√©marrage de l'application Fault Editor")
        self.root = root
        self.root.title("Fault Editor - Auto Reload")
        self.root.geometry("1400x800")
        self.lang = "fr"
        self.file_map = {}
        self.data_map = {}
        self.path_map = {}
        self.columns = []  # Liste des colonnes cr√©√©es
        self.current_path = [0, 255, 255, 255]  # Chemin courant
        self.editing_info = None  # Dictionnaire contenant les infos de l'√©dition en cours
        self.base_dir = None  # Dossier courant pour les fichiers JSON
        self.search_results = []  # Pour stocker les r√©sultats de recherche
        self.current_search_index = -1  # Index actuel dans les r√©sultats
        self.search_mode = "hierarchical"  # Mode de recherche (hierarchical ou flat)
        self.search_frame = None  # Frame pour la barre de recherche
        self.current_file_path = None  # Chemin du fichier actuellement s√©lectionn√©
        # Ne pas charger de dossier par d√©faut, attendre que l'utilisateur ouvre un dossier
        self.setup_ui()

    def initialize_file_map(self, folder):
        logger.info(f"Initialisation du file_map pour le dossier: {folder}")
        self.file_map.clear()
        for root_dir, _, files in os.walk(folder):
            for file in files:
                if file.endswith(".json"):
                    self.file_map[file] = os.path.join(root_dir, file)
        logger.info(f"Total : {len(self.file_map)} fichiers JSON trouv√©s dans {folder}")

    def setup_ui(self):
        style = ttk.Style()
        style.configure('TRadiobutton', font=FONT_TOPBAR)
        style.configure('TButton', font=FONT_TOPBAR)

        # Barre sup√©rieure avec logo
        topbar = tk.Frame(self.root, bg=COL_BG_TOPBAR, height=60)
        topbar.pack(fill="x")
        topbar.pack_propagate(False)

        # Logo Noovelia
        logo_frame = tk.Frame(topbar, bg=COL_BG_TOPBAR)
        logo_frame.pack(side="left", padx=10)
        logo_label = tk.Label(logo_frame, text="noovelia", font=("Segoe UI", 16), bg=COL_BG_TOPBAR, fg="white")
        logo_label.pack(side="left")

        # Boutons de la barre sup√©rieure
        buttons_frame = tk.Frame(topbar, bg=COL_BG_TOPBAR)
        buttons_frame.pack(side="right", padx=10)

        # Bouton de recherche
        search_btn = tk.Button(buttons_frame, text="üîç Rechercher",
                              command=lambda: self.show_search(),
                              bg=COL_BG_TOPBAR, fg="white",
                              font=FONT_DEFAULT,
                              relief="flat", padx=10, pady=5)
        search_btn.pack(side="right", padx=(10, 2))

        # Boutons d'ouverture de fichiers
        open_btn = ttk.Button(buttons_frame, text="üìÇ Ouvrir un dossier", command=self.open_folder)
        open_btn.pack(side="right", padx=2)

        load_flat_btn = ttk.Button(buttons_frame, text="üìÑ Charger JSON plat", command=self.load_flat_json)
        load_flat_btn.pack(side="right", padx=2)

        # S√©lecteur de langue
        lang_frame = tk.Frame(buttons_frame, bg=COL_BG_TOPBAR)
        lang_frame.pack(side="right", padx=10)

        self.lang_var = tk.StringVar(value="fr")
        ttk.Radiobutton(lang_frame, text="FR", value="fr", variable=self.lang_var, command=self.reload_lang).pack(side="left", padx=2)
        ttk.Radiobutton(lang_frame, text="EN", value="en", variable=self.lang_var, command=self.reload_lang).pack(side="left", padx=2)
        ttk.Radiobutton(lang_frame, text="ES", value="es", variable=self.lang_var, command=self.reload_lang).pack(side="left", padx=2)

        # Cadre des outils (pour pouvoir d√©sactiver/activer les boutons)
        self.tools_frame = tk.Frame(self.root, bg="#2a2a2a", height=50)
        self.tools_frame.pack(fill="x", side="top", pady=(0, 5))
        self.tools_frame.pack_propagate(False)

        btn_sync_all = ttk.Button(self.tools_frame, text="Synchroniser tous les fichiers", command=self.run_sync_all)
        btn_sync_all.pack(side="left", padx=5)

        self.sync_one_var = tk.StringVar()
        tk.Label(self.tools_frame, text="Fichier √† synchroniser:", bg="#2a2a2a", fg="white").pack(side="left", padx=(10,1))
        ttk.Entry(self.tools_frame, textvariable=self.sync_one_var, width=25).pack(side="left")
        btn_sync_one = ttk.Button(self.tools_frame, text="Synchroniser ce fichier", command=self.run_sync_one)
        btn_sync_one.pack(side="left", padx=5)

        self.genfichier_file_var = tk.StringVar()
        self.genfichier_src_var  = tk.StringVar(value="fr")
        self.genfichier_tgt_var  = tk.StringVar(value="en")
        tk.Label(self.tools_frame, text="gen_fichier:", bg="#2a2a2a", fg="white").pack(side="left", padx=(10,1))
        ttk.Entry(self.tools_frame, textvariable=self.genfichier_file_var, width=20).pack(side="left")
        tk.Label(self.tools_frame, text="src:", bg="#2a2a2a", fg="white").pack(side="left", padx=(10,1))
        ttk.Entry(self.tools_frame, textvariable=self.genfichier_src_var, width=5).pack(side="left")
        tk.Label(self.tools_frame, text="tgt:", bg="#2a2a2a", fg="white").pack(side="left", padx=(10,1))
        ttk.Entry(self.tools_frame, textvariable=self.genfichier_tgt_var, width=5).pack(side="left")

        btn_genfichier = ttk.Button(self.tools_frame, text="G√©n√©rer fichier", command=self.run_generer_fichier)
        btn_genfichier.pack(side="left", padx=5)

        btn_gen_manquant = ttk.Button(self.tools_frame, text="G√©n√©rer les fichiers manquants", command=self.run_generer_manquant)
        btn_gen_manquant.pack(side="left", padx=5)

        btn_check = ttk.Button(self.tools_frame, text="V√©rifier la coh√©rence", command=self.run_check_coherence)
        btn_check.pack(side="left", padx=5)

        btn_spell_check = ttk.Button(self.tools_frame, text="üîç V√©rifier l'orthographe", command=self.run_spell_check)
        btn_spell_check.pack(side="left", padx=5)

        self.selected_file_label = tk.Label(self.tools_frame, text="Fichier s√©lectionn√© :", bg="#2a2a2a", fg="white", font=FONT_DEFAULT)
        self.selected_file_label.pack(side="left", padx=10)

        # Barre d'√©tat
        self.status = tk.Label(self.root, text="Pr√™t", bd=1, relief=tk.SUNKEN, anchor=tk.W, bg=COL_BG_TOPBAR, fg="white")
        self.status.pack(side=tk.BOTTOM, fill=tk.X)

        # Style des scrollbars
        style = ttk.Style()
        style.configure("Custom.Vertical.TScrollbar",
                       background=COL_BG_MAIN,
                       troughcolor=COL_BG_MAIN,
                       arrowcolor="white")
        style.configure("Custom.Horizontal.TScrollbar",
                       background=COL_BG_MAIN,
                       troughcolor=COL_BG_MAIN,
                       arrowcolor="white")

        # Conteneur pour le canvas et les scrollbars
        container = tk.Frame(self.root)
        container.pack(fill="both", expand=True)

        # Canvas principal pour les colonnes avec nouveaux styles de scrollbar
        self.main_canvas = tk.Canvas(container, bg=COL_BG_MAIN)
        self.main_canvas.pack(side="left", fill="both", expand=True)

        # Scrollbar verticale avec nouveau style
        scrollbar_y = ttk.Scrollbar(container, orient="vertical",
                                  command=self.main_canvas.yview,
                                  style="Custom.Vertical.TScrollbar")
        scrollbar_y.pack(side="right", fill="y")
        self.main_canvas.configure(yscrollcommand=scrollbar_y.set)

        # Scrollbar horizontale avec nouveau style
        scrollbar_x = ttk.Scrollbar(container, orient="horizontal",
                                  command=self.main_canvas.xview,
                                  style="Custom.Horizontal.TScrollbar")
        scrollbar_x.pack(side="bottom", fill="x")
        self.main_canvas.configure(xscrollcommand=scrollbar_x.set)
        self.scrollbar_x = scrollbar_x

        # Frame interne contenant les colonnes
        self.columns_frame = tk.Frame(self.main_canvas, bg=COL_BG_MAIN)
        self.canvas_window = self.main_canvas.create_window((0, 0), window=self.columns_frame, anchor="nw")

        # Met √† jour la zone scrollable en fonction du contenu
        self.columns_frame.bind("<Configure>", lambda e: self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all")))
        self.columns_frame.bind("<Configure>", lambda e: self.main_canvas.itemconfig(self.canvas_window, width=self.columns_frame.winfo_reqwidth()))
        # G√®re la visibilit√© dynamique de la scrollbar horizontale
        self.main_canvas.bind("<Configure>", self.update_xscroll_visibility)
        self.columns_frame.bind("<Configure>", self.update_xscroll_visibility)

        # On ajuste seulement la hauteur pour que le canvas prenne toute la hauteur de la fen√™tre
        self.root.bind("<Configure>", lambda e: self.main_canvas.config(height=self.root.winfo_height()))

        # Binding de la molette pour le scroll vertical
        def on_mousewheel(event):
            if event.state & 0x4:  # Ctrl est press√©
                # Zoom ou d√©zoom (√† impl√©menter si n√©cessaire)
                return
            elif event.state & 0x1:  # Shift est press√©
                self.main_canvas.xview_scroll(int(-1 * (event.delta / 120)), "units")
            else:
                self.main_canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

        self.root.unbind_all("<MouseWheel>")
        self.root.bind_all("<MouseWheel>", on_mousewheel)

        # Am√©liore la gestion du focus
        def on_focus_in(event):
            if isinstance(event.widget, tk.Entry):
                event.widget.config(bg=COL_EDIT_BG_FOCUS)

        def on_focus_out(event):
            if isinstance(event.widget, tk.Entry):
                event.widget.config(bg=COL_EDIT_BG)

        self.root.bind_class("Entry", "<FocusIn>", on_focus_in)
        self.root.bind_class("Entry", "<FocusOut>", on_focus_out)

        # Binding des √©v√©nements pour une meilleure gestion de la navigation
        self.root.bind("<Control-r>", lambda e: self.reload_root())
        self.root.bind("<Escape>", lambda e: self.unmake_editable())
        self.root.bind("<Control-f>", lambda e: self.show_search())  # Raccourci Ctrl+F pour la recherche

    def reload_root(self, event=None):
        """Recharge compl√®tement l'interface depuis la racine"""
        try:
            # Sauvegarde de l'√©tat
            old_lang = self.lang
            old_path = self.current_path[:]

            # Recharge depuis la racine
            self.load_root()

            # Essaie de restaurer le chemin pr√©c√©dent
            try:
                self.rebuild_columns_for_path()
                self.status.config(text="‚úÖ Interface recharg√©e")
            except Exception as e:
                print(f"‚ùå Erreur lors de la restauration du chemin : {e}")
                # On reste √† la racine en cas d'erreur
                self.status.config(text="‚úÖ Interface recharg√©e (racine)")
        except Exception as e:
            print(f"‚ùå Erreur lors du rechargement : {e}")
            self.status.config(text="‚ùå Erreur de rechargement")

    def update_xscroll_visibility(self, event=None):
        # Affiche ou masque la scrollbar horizontale selon la largeur du contenu
        canvas_width = self.main_canvas.winfo_width()
        content_width = self.columns_frame.winfo_reqwidth()
        if content_width > canvas_width:
            self.scrollbar_x.pack(side="bottom", fill="x")
        else:
            self.scrollbar_x.pack_forget()

    def on_mousewheel(self, event):
        self.main_canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

    # M√©thode pour afficher un popup de chargement
    def afficher_popup_chargement(self, message="Traitement en cours..."):
        popup = tk.Toplevel(self.root)
        popup.title("Veuillez patienter")
        popup.geometry("300x100")
        popup.transient(self.root)
        popup.grab_set()  # Bloque les interactions avec la fen√™tre principale
        popup.resizable(False, False)
        tk.Label(popup, text=message, font=("Segoe UI", 11)).pack(pady=20)
        self.root.update_idletasks()
        return popup

    # M√©thode pour activer/d√©sactiver les widgets de la barre d'outils
    def set_tools_enabled(self, state):
        for widget in self.tools_frame.winfo_children():
            try:
                # V√©rifier que le widget a bien un attribut config avant de l'utiliser
                if hasattr(widget, 'config'):
                    widget.config(state=state)  # type: ignore
            except tk.TclError:
                pass    # --- Fonctions pour lancer les scripts externes ---
    def run_sync_all(self):
        cmd = ["python", "sync_all.py"]
        self.run_command(cmd, desc="Synchroniser tous les fichiers")

    def run_sync_one(self):
        arg = self.sync_one_var.get().strip()
        if not arg:
            self.status.config(text="‚ùå Argument sync_one manquant")
            print("‚ùå Aucun argument fourni pour sync_one")
            return        # Valider que le fichier existe
        file_path = self.file_map.get(arg)
        if not file_path or not os.path.exists(file_path):
            self.status.config(text=f"‚ùå Fichier introuvable : {arg}")
            print(f"‚ùå Fichier introuvable : {arg}")
            return

        print(f"üîÑ Lancement de sync_one pour : {file_path}")
        cmd = ["python", "sync_one.py", file_path, "--force"]
        self.run_command(cmd, desc=f"Synchroniser {arg}")

    def run_generer_fichier(self):
        if not self.base_dir:
            self.status.config(text="‚ùå Aucun dossier ouvert")
            return

        f_arg = self.genfichier_file_var.get().strip()
        src = self.genfichier_src_var.get().strip()
        tgt = self.genfichier_tgt_var.get().strip()

        if not (f_arg and src and tgt):
            self.status.config(text="‚ùå Arguments generer_fichier manquants")
            return

        cmd = ["python", "generer_fichier.py", self.base_dir, f_arg, src, tgt]
        self.run_command(cmd, desc=f"G√©n√©rer fichier {f_arg} {src}->{tgt}")

    def run_generer_manquant(self):
        if not self.base_dir:
            self.status.config(text="‚ùå Aucun dossier ouvert")
            return
        cmd = ["python", "generer_manquant.py", self.base_dir]
        self.run_command(cmd, desc="G√©n√©rer les fichiers manquants")

    def run_check_coherence(self):
        """Mashup complet : Coh√©rence + Orthographe + Headers - Version optimis√©e"""
        if not hasattr(self, 'file_map') or not self.file_map:
            self.status.config(text="‚ùå Aucun dossier ouvert")
            return

        # Obtenir le dossier parent du premier fichier trouv√©
        premier_fichier = next(iter(self.file_map.values()))
        dossier_base = os.path.dirname(premier_fichier)
        print(f"üöÄ Lancement du diagnostic complet dans : {dossier_base}")
        # Afficher le dialogue de choix des actions
        self.show_comprehensive_check_dialog(dossier_base)

    def show_comprehensive_check_dialog(self, dossier_base):
        """Affiche un dialogue pour choisir les v√©rifications et corrections √† effectuer"""
        dialog = tk.Toplevel(self.root)
        dialog.title("üöÄ Diagnostic Complet - AGV Config Traduction")
        dialog.geometry("600x500")
        dialog.transient(self.root)
        dialog.grab_set()

        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))

        # Frame principal
        main_frame = tk.Frame(dialog, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)

        # Titre
        title_label = tk.Label(main_frame, text="üöÄ Diagnostic et Correction Automatique",
                              font=("Arial", 14, "bold"))
        title_label.pack(pady=(0, 20))

        # Informations sur le dossier
        info_frame = tk.Frame(main_frame)
        info_frame.pack(fill=tk.X, pady=(0, 20))

        tk.Label(info_frame, text="üìÅ Dossier :", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        tk.Label(info_frame, text=dossier_base, font=("Arial", 9),
                wraplength=550, justify=tk.LEFT).pack(anchor=tk.W, padx=(20, 0))

        # Variables pour les checkboxes
        self.check_coherence_var = tk.BooleanVar(value=True)
        self.fix_coherence_var = tk.BooleanVar(value=True)
        self.check_spelling_var = tk.BooleanVar(value=True)
        self.fix_headers_var = tk.BooleanVar(value=True)

        # Section V√©rifications
        verif_frame = tk.LabelFrame(main_frame, text="üîç V√©rifications √† effectuer",
                                   font=("Arial", 11, "bold"), padx=10, pady=10)
        verif_frame.pack(fill=tk.X, pady=(0, 15))

        tk.Checkbutton(verif_frame, text="‚úÖ V√©rifier la coh√©rence des fichiers de traduction",
                      variable=self.check_coherence_var, font=("Arial", 10)).pack(anchor=tk.W)

        tk.Checkbutton(verif_frame, text="üìù V√©rifier l'orthographe des traductions",
                      variable=self.check_spelling_var, font=("Arial", 10)).pack(anchor=tk.W)

        # Section Corrections automatiques
        correct_frame = tk.LabelFrame(main_frame, text="üîß Corrections automatiques",
                                     font=("Arial", 11, "bold"), padx=10, pady=10)
        correct_frame.pack(fill=tk.X, pady=(0, 20))

        tk.Checkbutton(correct_frame, text="üîß Corriger automatiquement les erreurs de m√©tadonn√©es",
                      variable=self.fix_coherence_var, font=("Arial", 10)).pack(anchor=tk.W)

        tk.Checkbutton(correct_frame, text="üìã Corriger et normaliser les headers JSON",
                      variable=self.fix_headers_var, font=("Arial", 10)).pack(anchor=tk.W)

        # Zone d'information
        info_text = tk.Text(correct_frame, height=4, wrap=tk.WORD, font=("Arial", 9))
        info_text.pack(fill=tk.X, pady=(10, 0))
        info_text.insert(tk.END,
            "‚ÑπÔ∏è  Les corrections automatiques incluent :\n"
            "‚Ä¢ Correction des langues dans les headers (Language: fr/en/es)\n"
            "‚Ä¢ Correction des noms de fichiers dans les headers\n"
            "‚Ä¢ Correction des IDs de niveaux (IdLevel0-3)\n"
            "‚Ä¢ Normalisation de la structure des headers JSON")
        info_text.config(state=tk.DISABLED)

        # Boutons
        button_frame = tk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(10, 0))

        # Bouton Tout v√©rifier et corriger
        tk.Button(button_frame, text="üöÄ Lancer le diagnostic complet",
                 command=lambda: self.run_comprehensive_check(dialog, dossier_base, True),
                 bg="#4CAF50", fg="white", font=("Arial", 11, "bold"),
                 padx=20, pady=10).pack(side=tk.LEFT, padx=(0, 10))

        # Bouton V√©rifier seulement
        tk.Button(button_frame, text="üîç V√©rifier seulement (pas de corrections)",
                 command=lambda: self.run_comprehensive_check(dialog, dossier_base, False),
                 bg="#2196F3", fg="white", font=("Arial", 10),
                 padx=20, pady=8).pack(side=tk.LEFT, padx=(0, 10))

        # Bouton Annuler
        tk.Button(button_frame, text="‚ùå Annuler",
                 command=dialog.destroy,
                 bg="#f44336", fg="white", font=("Arial", 10),
                 padx=20, pady=8).pack(side=tk.RIGHT)

    def run_comprehensive_check(self, dialog, dossier_base, apply_corrections):
        """Lance le diagnostic complet selon les options s√©lectionn√©es"""
        dialog.destroy()

        print(f"\nüöÄ ===== DIAGNOSTIC COMPLET D√âMARR√â =====")
        print(f"üìÅ Dossier : {dossier_base}")
        print(f"üîß Corrections automatiques : {'‚úÖ Activ√©es' if apply_corrections else '‚ùå D√©sactiv√©es'}")

        results = {
            'coherence': None,
            'spelling': None,
            'headers': None,
            'total_errors': 0,
            'total_corrections': 0
        }

        # 1. V√©rification de coh√©rence
        if self.check_coherence_var.get():
            print(f"\nüìã 1/3 - V√©rification de la coh√©rence...")
            results['coherence'] = self.run_coherence_check_step(dossier_base,
                                                                apply_corrections and self.fix_coherence_var.get())

        # 2. V√©rification orthographique
        if self.check_spelling_var.get():
            print(f"\nüìù 2/3 - V√©rification orthographique...")
            results['spelling'] = self.run_spelling_check_step(dossier_base)

        # 3. Correction des headers
        if apply_corrections and self.fix_headers_var.get():
            print(f"\nüìã 3/3 - Correction des headers...")
            results['headers'] = self.run_headers_fix_step(dossier_base)

        # Afficher le r√©sum√© final
        self.show_comprehensive_results(results, dossier_base)

    def run_coherence_check_step(self, dossier_base, apply_fix):
        """√âtape de v√©rification de coh√©rence"""
        try:
            script_dir = os.path.dirname(os.path.abspath(__file__))

            # Commande de base
            cmd = ["python", os.path.join(script_dir, "check_coherence.py"), dossier_base]

            # Ajouter --fix si demand√©
            if apply_fix:
                cmd.append("--fix")
                print("üîß Mode correction automatique activ√© pour la coh√©rence")

            env = os.environ.copy()
            env["PYTHONIOENCODING"] = "utf-8"

            result = subprocess.run(cmd, capture_output=True, text=True,
                                  encoding="utf-8", errors="replace", env=env, cwd=script_dir)

            if result.stdout:
                print("üìã R√©sultats coh√©rence :")
                print(result.stdout)

            return {
                'success': result.returncode == 0,
                'output': result.stdout,
                'errors': result.stderr,
                'fixed': apply_fix and "corrections appliqu√©es" in result.stdout
            }

        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification de coh√©rence : {e}")
            return {'success': False, 'output': '', 'errors': str(e), 'fixed': False}

    def run_spelling_check_step(self, dossier_base):
        """√âtape de v√©rification orthographique"""
        try:
            script_dir = os.path.dirname(os.path.abspath(__file__))
            cmd = ["python", os.path.join(script_dir, "verifier_orthographe.py"), dossier_base]

            env = os.environ.copy()
            env["PYTHONIOENCODING"] = "utf-8"

            result = subprocess.run(cmd, capture_output=True, text=True,
                                  encoding="utf-8", errors="replace", env=env, cwd=script_dir)

            if result.stdout:
                print("üìù R√©sultats orthographe :")
                print(result.stdout)

            return {
                'success': result.returncode == 0,
                'output': result.stdout,
                'errors': result.stderr
            }

        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification orthographique : {e}")
            return {'success': False, 'output': '', 'errors': str(e)}

    def run_headers_fix_step(self, dossier_base):
        """√âtape de correction des headers"""
        try:
            script_dir = os.path.dirname(os.path.abspath(__file__))
            cmd = ["python", os.path.join(script_dir, "fix_headers.py"), dossier_base]

            env = os.environ.copy()
            env["PYTHONIOENCODING"] = "utf-8"

            result = subprocess.run(cmd, capture_output=True, text=True,
                                  encoding="utf-8", errors="replace", env=env, cwd=script_dir)

            if result.stdout:
                print("üìã R√©sultats correction headers :")
                print(result.stdout)

            return {
                'success': result.returncode == 0,
                'output': result.stdout,
                'errors': result.stderr,
                'fixed': "fichiers trait√©s" in result.stdout or "corrections appliqu√©es" in result.stdout
            }

        except Exception as e:
            print(f"‚ùå Erreur lors de la correction des headers : {e}")
            return {'success': False, 'output': '', 'errors': str(e), 'fixed': False}

    def show_comprehensive_results(self, results, dossier_base):
        """Affiche les r√©sultats complets du diagnostic"""
        print(f"\nüéØ ===== DIAGNOSTIC COMPLET TERMIN√â =====")

        # Compter les succ√®s et erreurs
        total_success = 0
        total_steps = 0
        corrections_applied = 0

        # Cr√©er la fen√™tre de r√©sultats
        result_window = tk.Toplevel(self.root)
        result_window.title("üéØ R√©sultats du Diagnostic Complet")
        result_window.geometry("800x600")
        result_window.transient(self.root)

        # Frame principal avec scrollbar
        main_frame = tk.Frame(result_window)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # Titre
        title_text = "üéØ R√©sultats du Diagnostic Complet"
        tk.Label(main_frame, text=title_text, font=("Arial", 16, "bold")).pack(pady=(0, 20))

        # Dossier analys√©
        tk.Label(main_frame, text=f"üìÅ Dossier analys√© : {dossier_base}",
                font=("Arial", 10)).pack(anchor=tk.W, pady=(0, 20))

        # Zone de texte avec scrollbar
        text_frame = tk.Frame(main_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)

        text_widget = tk.Text(text_frame, wrap=tk.WORD, font=("Consolas", 10))
        scrollbar = tk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)
        text_widget.configure(yscrollcommand=scrollbar.set)

        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Remplir les r√©sultats
        result_text = f"üìä RAPPORT DE DIAGNOSTIC COMPLET\n"
        result_text += f"{'=' * 60}\n\n"

        # R√©sultats de coh√©rence
        if results['coherence']:
            total_steps += 1
            result_text += "üîç 1. V√âRIFICATION DE COH√âRENCE\n"
            result_text += "-" * 40 + "\n"
            if results['coherence']['success']:
                total_success += 1
                result_text += "‚úÖ Statut : Succ√®s\n"
            else:
                result_text += "‚ùå Statut : Erreurs d√©tect√©es\n"

            if results['coherence']['fixed']:
                corrections_applied += 1
                result_text += "üîß Corrections automatiques appliqu√©es\n"

            if results['coherence']['output']:
                result_text += f"\nüìã D√©tails :\n{results['coherence']['output']}\n"
            result_text += "\n"

        # R√©sultats orthographiques
        if results['spelling']:
            total_steps += 1
            result_text += "üìù 2. V√âRIFICATION ORTHOGRAPHIQUE\n"
            result_text += "-" * 40 + "\n"
            if results['spelling']['success']:
                total_success += 1
                result_text += "‚úÖ Statut : Succ√®s\n"
            else:
                result_text += "‚ùå Statut : Erreurs d√©tect√©es\n"

            if results['spelling']['output']:
                result_text += f"\nüìã D√©tails :\n{results['spelling']['output']}\n"
            result_text += "\n"

        # R√©sultats headers
        if results['headers']:
            total_steps += 1
            result_text += "üìã 3. CORRECTION DES HEADERS\n"
            result_text += "-" * 40 + "\n"
            if results['headers']['success']:
                total_success += 1
                result_text += "‚úÖ Statut : Succ√®s\n"
            else:
                result_text += "‚ùå Statut : Erreurs\n"

            if results['headers']['fixed']:
                corrections_applied += 1
                result_text += "üîß Headers corrig√©s et normalis√©s\n"

            if results['headers']['output']:
                result_text += f"\nüìã D√©tails :\n{results['headers']['output']}\n"
            result_text += "\n"

        # R√©sum√© final
        result_text += "üéØ R√âSUM√â FINAL\n"
        result_text += "=" * 60 + "\n"
        result_text += f"üìä √âtapes ex√©cut√©es : {total_steps}\n"
        result_text += f"‚úÖ √âtapes r√©ussies : {total_success}\n"
        result_text += f"‚ùå √âtapes avec erreurs : {total_steps - total_success}\n"
        result_text += f"üîß Corrections appliqu√©es : {corrections_applied}\n\n"

        if total_success == total_steps:
            result_text += "üéâ DIAGNOSTIC COMPLET : TOUS LES TESTS SONT PASS√âS !\n"
            status_msg = "üéâ Diagnostic complet r√©ussi"
        else:
            result_text += "‚ö†Ô∏è DIAGNOSTIC COMPLET : DES PROBL√àMES ONT √âT√â D√âTECT√âS\n"
            if corrections_applied > 0:
                result_text += "‚úÖ Des corrections automatiques ont √©t√© appliqu√©es.\n"
            status_msg = f"‚ö†Ô∏è Diagnostic termin√© ({total_success}/{total_steps} r√©ussis)"

        # Ins√©rer le texte
        text_widget.insert(tk.END, result_text)
        text_widget.config(state=tk.DISABLED)

        # Bouton fermer
        tk.Button(main_frame, text="‚úÖ Fermer", command=result_window.destroy,
                 bg="#4CAF50", fg="white", font=("Arial", 11, "bold"),
                 padx=30, pady=10).pack(pady=(20, 0))

        # Mettre √† jour le statut principal
        self.status.config(text=status_msg)

        print(f"üìä Diagnostic termin√© : {total_success}/{total_steps} √©tapes r√©ussies")
        if corrections_applied > 0:
            print(f"üîß {corrections_applied} types de corrections appliqu√©es")

    def run_command_with_fix_option(self, cmd, dossier_base, desc=""):
        """Ex√©cute une commande et propose de corriger les erreurs si n√©cessaire"""
        logger.info(f"Ex√©cution de la commande: {' '.join(cmd)}")
        self.set_tools_enabled("disabled")
        popup = self.afficher_popup_chargement(f"{desc} en cours...")

        try:
            # Obtenir le chemin du dossier contenant app.py
            script_dir = os.path.dirname(os.path.abspath(__file__))

            # Modifier la commande pour inclure le chemin complet du script
            if cmd[0] == "python":
                cmd[1] = os.path.join(script_dir, cmd[1])

            self.status.config(text=f"‚è≥ Ex√©cution : {desc} ...")
            env = os.environ.copy()
            env["PYTHONIOENCODING"] = "utf-8"

            logger.info(f"Ex√©cution dans le dossier: {script_dir}")
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                encoding="utf-8",
                errors="replace",
                env=env,
                cwd=script_dir
            )

            # Afficher la sortie du script dans la console
            if result.stdout:
                print(f"\nüìã Sortie de {desc}:")
                print("=" * 50)
                print(result.stdout)
                print("=" * 50)

            if result.returncode == 0:
                logger.info(f"Commande termin√©e avec succ√®s: {desc}")
                self.status.config(text=f"‚úÖ {desc} - Aucune erreur d√©tect√©e")

                # Afficher les r√©sultats dans une fen√™tre de dialogue
                if result.stdout:
                    self.show_script_results(f"‚úÖ {desc} - Termin√©", result.stdout, True)
            else:
                logger.warning(f"Erreurs d√©tect√©es lors de {desc}")

                # Analyser la sortie pour voir si des erreurs de m√©tadonn√©es ont √©t√© trouv√©es
                has_metadata_errors = "üü† Erreurs m√©tadonn√©es" in result.stdout and "Erreurs m√©tadonn√©es : 0" not in result.stdout

                if has_metadata_errors:
                    # Proposer de corriger automatiquement
                    popup.destroy()  # Fermer le popup de chargement

                    response = messagebox.askyesnocancel(
                        "Erreurs d√©tect√©es",
                        f"Des erreurs de coh√©rence ont √©t√© d√©tect√©es.\n\n"
                        f"Voulez-vous :\n"
                        f"‚Ä¢ OUI : Corriger automatiquement les erreurs de m√©tadonn√©es\n"
                        f"‚Ä¢ NON : Voir seulement le rapport d'erreurs\n"
                        f"‚Ä¢ ANNULER : Fermer",
                        icon='question'
                    )

                    if response is True:  # OUI - Corriger automatiquement
                        self.run_fix_coherence_errors(dossier_base)
                        return
                    elif response is False:  # NON - Voir le rapport
                        pass  # Continue pour afficher le rapport
                    else:  # ANNULER
                        self.status.config(text="‚ùå V√©rification annul√©e")
                        return

                # Pr√©parer le message d'erreur complet
                error_message = f"Code de retour: {result.returncode}\n\n"
                if result.stderr:
                    error_message += f"Erreur:\n{result.stderr}\n\n"
                if result.stdout:
                    error_message += f"Sortie:\n{result.stdout}"
                else:
                    error_message += "Aucune sortie disponible"

                # Afficher l'erreur dans une fen√™tre de dialogue
                self.show_script_results(f"‚ö†Ô∏è Erreurs d√©tect√©es - {desc}", error_message, False)
                self.status.config(text=f"‚ö†Ô∏è Erreurs d√©tect√©es : {desc}")

        except Exception as e:
            logger.error(f"Exception lors de l'ex√©cution de {desc}: {str(e)}")
            print(f"\n‚ùå Exception lors de {desc}: {str(e)}")
            self.status.config(text=f"‚ùå Exception : {desc}")
        finally:
            if 'popup' in locals():
                popup.destroy()
            self.set_tools_enabled("normal")

    def run_fix_coherence_errors(self, dossier_base):
        """Lance la correction automatique des erreurs de coh√©rence"""
        print(f"üîß Lancement de la correction automatique dans : {dossier_base}")

        # Lancer check_coherence.py avec l'option --fix
        cmd = ["python", "check_coherence.py", dossier_base, "--fix"]
        self.run_command(cmd, desc="Corriger les erreurs de coh√©rence")

    def run_spell_check(self):
        if not hasattr(self, 'file_map') or not self.file_map:
            self.status.config(text="‚ùå Aucun dossier ouvert")
            return

        # Obtenir le dossier parent du premier fichier trouv√©
        premier_fichier = next(iter(self.file_map.values()))
        dossier_base = os.path.dirname(premier_fichier)

        print(f"üîç V√©rification orthographique dans : {dossier_base}")
        cmd = ["python", "verifier_orthographe.py", dossier_base]
        self.run_command(cmd, desc="V√©rifier l'orthographe")

    def run_command(self, cmd, desc=""):
        logger.info(f"Ex√©cution de la commande: {' '.join(cmd)}")
        self.set_tools_enabled("disabled")
        popup = self.afficher_popup_chargement(f"{desc} en cours...")
        try:
            # Obtenir le chemin du dossier contenant app.py
            script_dir = os.path.dirname(os.path.abspath(__file__))

            # Modifier la commande pour inclure le chemin complet du script
            if cmd[0] == "python":
                cmd[1] = os.path.join(script_dir, cmd[1])

            self.status.config(text=f"‚è≥ Ex√©cution : {desc} ...")
            env = os.environ.copy()
            env["PYTHONIOENCODING"] = "utf-8"

            logger.info(f"Ex√©cution dans le dossier: {script_dir}")
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                encoding="utf-8",
                errors="replace",
                env=env,
                cwd=script_dir  # Utiliser le dossier du script comme dossier de travail
            )

            # Afficher la sortie du script dans la console
            if result.stdout:
                print(f"\nüìã Sortie de {desc}:")
                print("=" * 50)
                print(result.stdout)
                print("=" * 50)

            if result.returncode == 0:
                logger.info(f"Commande termin√©e avec succ√®s: {desc}")
                logger.debug(f"Sortie de la commande:\n{result.stdout}")

                # Analyser la sortie pour voir si des traductions ont √©t√© effectu√©es
                success_indicators = ["‚úÖ", "üéâ", "mis √† jour", "termin√©e avec succ√®s"]
                warning_indicators = ["‚ö†Ô∏è", "aucune", "d√©j√†", "identique"]

                # Afficher les r√©sultats dans une fen√™tre de dialogue
                if result.stdout:
                    self.show_script_results(f"‚úÖ {desc} - Termin√©", result.stdout, True)

                if any(indicator in result.stdout for indicator in success_indicators):
                    if any(indicator in result.stdout for indicator in warning_indicators):
                        self.status.config(text=f"‚ö†Ô∏è {desc} - Voir d√©tails dans la fen√™tre")
                    else:
                        self.status.config(text=f"‚úÖ {desc} - Traductions effectu√©es")
                else:
                    self.status.config(text=f"‚ö†Ô∏è {desc} - Aucune traduction d√©tect√©e")
            else:
                logger.error(f"Erreur lors de l'ex√©cution de {desc}: {result.stderr}")

                # Pr√©parer le message d'erreur complet
                error_message = f"Code de retour: {result.returncode}\n\n"
                if result.stderr:
                    error_message += f"Erreur:\n{result.stderr}\n\n"
                if result.stdout:
                    error_message += f"Sortie:\n{result.stdout}"
                else:
                    error_message += "Aucune sortie disponible"

                print(f"\n‚ùå Erreur lors de {desc}:")
                print("=" * 50)
                print(error_message)
                print("=" * 50)

                # Afficher l'erreur dans une fen√™tre de dialogue
                self.show_script_results(f"‚ùå Erreur - {desc}", error_message, False)
                self.status.config(text=f"‚ùå Erreur : {desc}")
        except Exception as e:
            logger.error(f"Exception lors de l'ex√©cution de {desc}: {str(e)}")
            print(f"\n‚ùå Exception lors de {desc}: {str(e)}")
            self.status.config(text=f"‚ùå Exception : {desc}")
        finally:
            popup.destroy()
            self.set_tools_enabled("normal")

    def run_sync_script(self, file_path):
        try:
            if not file_path:
                self.status.config(text="‚ùå Aucun fichier s√©lectionn√©")
                print("‚ùå Aucun fichier s√©lectionn√© pour la synchronisation")
                return

            # Utiliser le chemin complet du fichier source
            source_file = file_path

            if not os.path.exists(source_file):
                error_msg = f"‚ùå Fichier introuvable : {source_file}"
                self.status.config(text="‚ùå Fichier introuvable")
                print(error_msg)
                return

            source_dir = os.path.dirname(source_file)
            print(f"üìÇ R√©pertoire de travail pour la synchronisation : {source_dir}")

            # Appeler sync_one.py avec le chemin complet du fichier source
            script_dir = os.path.dirname(os.path.abspath(__file__))
            result = subprocess.run(
                ["python", os.path.join(script_dir, "sync_one.py"), source_file],
                check=True,
                capture_output=True,
                text=True,
                encoding="utf-8",
                errors="replace",
                cwd=source_dir
            )

            if result.returncode == 0:
                self.status.config(text="‚úÖ Synchronisation r√©ussie")
                print("\nSortie du script :")
                print(result.stdout)
            else:
                self.status.config(text="‚ùå Erreur lors de la synchronisation")
                print("\nErreur lors de la synchronisation :")
                print(result.stderr)

        except Exception as e:
            self.status.config(text="‚ùå Erreur de synchronisation")
            print(f"\n‚ùå Erreur lors de la synchronisation : {e}")

    def reload_data(self):
        """Recharge les donn√©es des fichiers JSON en m√©moire"""
        for filename, filepath in self.path_map.items():
            try:
                with open(filepath, "r", encoding="utf-8") as f:
                    self.data_map[filename] = json.load(f)
            except Exception as e:
                print(f"Erreur lors du rechargement de {filename}: {e}")

    def sync_files(self):
        if not self.check_required_files():
            self.status.config(text="‚ùå Fichiers requis manquants")
            return

        try:
            self.run_sync_script(self.current_file_path)
        except Exception as e:
            self.status.config(text="‚ùå Erreur lors de la synchronisation")
            print(f"Erreur : {e}")

    def check_required_files(self):
        script_dir = os.path.dirname(os.path.abspath(__file__))
        required_files = ["sync_one.py", "generer_fichier.py", "translate.py"]

        missing_files = []
        for file in required_files:
            if not os.path.exists(os.path.join(script_dir, file)):
                missing_files.append(file)

        if missing_files:
            print(f"‚ùå Fichiers manquants : {', '.join(missing_files)}")
            print(f"üìÅ Dossier recherch√© : {script_dir}")
            return False

        return True

    # --- Navigation et chargement des colonnes ---
    def reload_lang(self):
        self.lang = self.lang_var.get()
        print(f"Changement de langue : {self.lang}")
        # Clear any active editing state before rebuilding UI
        self.editing_info = None
        # R√©initialise le chemin courant pour √©viter les erreurs
        self.current_path = [0, 255, 255, 255]
        self.clear_columns_from(0)
        self.rebuild_columns_for_path()

    def rebuild_columns_for_path(self):
        partial_path = [0, 255, 255, 255]
        self.load_level(partial_path, 0)
        if self.current_path[1] != 255:
            partial_path[1] = self.current_path[1]
            partial_path[2] = 255
            partial_path[3] = 255
            self.load_level(partial_path, 1)
            if self.current_path[2] != 255:
                partial_path[2] = self.current_path[2]
                partial_path[3] = 255
                self.load_level(partial_path, 2)
                if self.current_path[3] != 255:
                    partial_path[3] = self.current_path[3]
                    self.load_level(partial_path, 3)
        self.main_canvas.yview_moveto(0.0)

    def open_folder(self):
        folder = filedialog.askdirectory()
        if not folder:
            return
        self.base_dir = folder
        self.initialize_file_map(self.base_dir)
        print("Dossier ouvert :", folder)
        print("Fichiers trouv√©s :", list(self.file_map.keys()))
        self.current_path = [0, 255, 255, 255]
        self.load_root()

    def load_root(self):
        self.current_path = [0, 255, 255, 255]
        self.clear_columns_from(0)
        self.load_level(self.current_path, 0)

    def load_level(self, path, level):
        filename = self.path_to_filename(path)
        logger.info(f"Chargement du niveau {level} avec le fichier : {filename}")
        filepath = self.file_map.get(filename)
        if not filepath:
            logger.error(f"Fichier introuvable : {filename}")
            self.status.config(text=f"‚ùå Introuvable : {filename}")
            return
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                content = json.load(f)
            logger.info(f"Fichier {filename} charg√© avec succ√®s")
        except Exception as e:
            logger.error(f"Erreur lors de la lecture de {filename}: {str(e)}")
            self.status.config(text=f"‚ùå Erreur lecture {filename}")
            return
        self.data_map[filename] = content
        self.path_map[filename] = filepath
        self.clear_columns_from(level)
        fault_list = content.get("FaultDetailList", [])
        print(f"Nombre d'items dans FaultDetailList : {len(fault_list)}")
        self.display_column(fault_list, path, filename, level)
        self.root.after(100, lambda: self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all")))
        self.main_canvas.yview_moveto(0.0)

    def path_to_filename(self, path):
        return f"faults_{'_'.join(str(p).zfill(3) for p in path)}_{self.lang}.json"

    # --- Gestion des clics sur les items ---
    def update_selected_file(self, fn):
        self.selected_file_label.config(text=f"Fichier s√©lectionn√© : {fn}")
        self.sync_one_var.set(fn)
        self.genfichier_file_var.set(fn)

    def handle_single_click(self, fault, i, path, level, fn, event):
        widget = event.widget
        widget._click_job = widget.after(300, lambda: self.single_click_action(fault, i, path, level, fn))

    def single_click_action(self, fault, i, path, level, fn):
        self.update_selected_file(fn)
        print(f"Clic sur l'item {i} (Expandable={fault.get('IsExpandable')})")
        if fault.get("IsExpandable"):
            new_path = path[:]
            try:
                insert_idx = new_path.index(255)
            except ValueError:
                print("Erreur : 255 non trouv√© dans", new_path)
                # R√©initialise le chemin si une erreur survient
                self.current_path = [0, 255, 255, 255]
                self.clear_columns_from(0)
                self.rebuild_columns_for_path()
                return
            new_path[insert_idx] = i
            if insert_idx + 1 < len(new_path):
                new_path[insert_idx + 1] = 255
            self.current_path = new_path
            print(f"Navigation vers {self.path_to_filename(new_path)}")
            self.load_level(new_path, level + 1)

    def handle_double_click(self, fault, i, path, level, fn, row, event):
        if self.editing_info and self.editing_info["row"] != row:
            self.unmake_editable()
        self.editing_info = {"row": row, "fault": fault, "idx": i, "filename": fn, "path": path, "level": level}
        self.update_selected_file(fn)
        print(f"üõ†Ô∏è Double-clic sur {i} dans {fn}")
        self.make_editable(row, fault, i, fn, path, level)

    def display_column(self, fault_list, path, filename, level):
        col_index = len(self.columns)
        frame = tk.Frame(self.columns_frame, bg=COL_BG_COLUMN)
        frame.grid(row=0, column=col_index, padx=5, pady=10, sticky="nsew")
        self.columns_frame.grid_columnconfigure(col_index, minsize=MIN_COL_WIDTH)
        self.columns.append(frame)
        for idx, fault in enumerate(fault_list):
            row = tk.Frame(frame, bg=COL_BG_ROW, highlightthickness=0, highlightbackground=COL_HIGHLIGHT)
            row.pack(fill="x", padx=4, pady=3)
            row.bind("<Enter>", lambda e, r=row: r.configure(highlightthickness=1))
            row.bind("<Leave>", lambda e, r=row: r.configure(highlightthickness=0))
            color = COL_GREEN if fault.get("IsExpandable") else COL_RED
            dot = tk.Canvas(row, width=14, height=14, bg=COL_BG_ROW, highlightthickness=0)
            dot.create_oval(2, 2, 12, 12, fill=color, outline=color)
            dot.pack(side="left", padx=(6, 8))
            label_text = f"{idx}: {fault.get('Description', '(vide)')}"
            label = tk.Label(row, text=label_text, fg=COL_FG_TEXT, bg=COL_BG_ROW,
                             anchor="w", font=FONT_DEFAULT)
            label.pack(side="left", fill="x", expand=True)
            label.bind("<Button-1>", partial(self.handle_single_click, fault, idx, path, level, filename))
            label.bind("<Double-1>", partial(self.handle_double_click, fault, idx, path, level, filename, row))
        self.root.update_idletasks()
        self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all"))
        self.main_canvas.yview_moveto(0.0)

    def render_row(self, row, fault, idx, path, level, filename):
        """Rend un row en mode lecture seule (utile pour annuler l'√©dition)"""
        try:
            for w in row.winfo_children():
                w.destroy()
        except tk.TclError:
            # Widget has been destroyed (e.g., during language change), skip rendering
            return
        color = COL_GREEN if fault.get("IsExpandable") else COL_RED
        dot = tk.Canvas(row, width=14, height=14, bg=COL_BG_ROW, highlightthickness=0)
        dot.create_oval(2, 2, 12, 12, fill=color, outline=color)
        dot.pack(side="left", padx=(6,8))
        label_text = f"{idx}: {fault.get('Description', '(vide)')}"
        label = tk.Label(row, text=label_text, fg=COL_FG_TEXT, bg=COL_BG_ROW, anchor="w", font=FONT_DEFAULT)
        label.pack(side="left", fill="x", expand=True)
        label.bind("<Button-1>", partial(self.handle_single_click, fault, idx, path, level, filename))
        label.bind("<Double-1>", partial(self.handle_double_click, fault, idx, path, level, filename, row))

    def unmake_editable(self):
        """R√©tablit l'ancien row en mode lecture seule."""
        if not self.editing_info:
            return

        row  = self.editing_info["row"]
        fault = self.editing_info["fault"]
        idx   = self.editing_info["idx"]
        filename = self.editing_info["filename"]
        path = self.editing_info["path"]
        level = self.editing_info["level"]

        try:
            # Check if the widget still exists before trying to render it
            row.winfo_exists()
            self.render_row(row, fault, idx, path, level, filename)
        except tk.TclError:
            # Widget has been destroyed (e.g., during language change), just clear the editing info
            pass

        self.editing_info = None

    def make_editable(self, row, fault, idx, filename, path, level):
        print(f"‚úèÔ∏è Modification d√©clench√©e sur l'item {idx} dans {filename}")
        try:
            for widget in row.winfo_children():
                widget.destroy()
        except tk.TclError:
            # Widget has been destroyed (e.g., during language change), abort editing
            return
        desc_var = tk.StringVar(value=fault.get("Description", ""))
        desc_entry = tk.Entry(row, textvariable=desc_var, bg=COL_EDIT_BG, fg=COL_EDIT_FG,
                              highlightthickness=0, relief="flat", font=FONT_DEFAULT)
        desc_entry.pack(side="left", padx=5, fill="both", expand=True, ipady=4)
        desc_entry.focus_set()
        def save_edit(event=None):
            fault["Description"] = desc_var.get()
            fault["IsExpandable"] = exp_var.get()
            self.save_file(filename)
            self.unmake_editable()
        desc_entry.bind("<Return>", save_edit)
        exp_var = tk.BooleanVar(value=fault.get("IsExpandable", False))
        exp_check = tk.Checkbutton(row, text="Expandable", variable=exp_var,
                                   bg=COL_BG_ROW, fg=COL_FG_TEXT, selectcolor=COL_BG_ROW,
                                   activebackground=COL_BG_ROW, highlightthickness=0, bd=0,
                                   font=FONT_DEFAULT)
        exp_check.pack(side="left", padx=5)
        tk.Button(row, text="‚úÖ", command=save_edit,
                  bg=COL_BG_ROW, fg=COL_FG_TEXT, relief="flat", font=FONT_DEFAULT).pack(side="left", padx=5)
        row.update_idletasks()
        self.columns_frame.event_generate("<Configure>")

    def save_file(self, rel_path):
        logger.info(f"Sauvegarde du fichier: {rel_path}")
        try:
            with open(self.file_map[rel_path], "w", encoding="utf-8") as f:
                json.dump(self.data_map[os.path.basename(rel_path)], f, indent=2, ensure_ascii=False)
            logger.info(f"Fichier {rel_path} sauvegard√© avec succ√®s")
            self.status.config(text=f"‚úÖ {rel_path} sauvegard√©")
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde de {rel_path}: {str(e)}")
            self.status.config(text=f"‚ùå √âchec de la sauvegarde {rel_path}")

    def clear_columns_from(self, level):
        for frame in self.columns[level:]:
            frame.destroy()
        self.columns = self.columns[:level]
        self.root.update_idletasks()
        self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all"))

    def load_flat_json(self):
        file_path = filedialog.askopenfilename(
            title="S√©lectionner un fichier JSON plat (fr.json, en.json, es.json)",
            filetypes=[("Fichiers JSON", "*.json"), ("Tous les fichiers", "*.*")]
        )
        if not file_path:
            return

        # On force l'utilisation de fr.json, en.json, es.json dans le m√™me dossier
        base_dir = os.path.dirname(file_path)
        fr_path = os.path.join(base_dir, "fr.json")
        en_path = os.path.join(base_dir, "en.json")
        es_path = os.path.join(base_dir, "es.json")

        # Afficher les chemins exacts pour le d√©bogage
        print(f"\n-------- D√âBOGUE CHEMINS DE FICHIERS --------")
        print(f"Fichier s√©lectionn√© : {file_path}")
        print(f"Chemin fr.json : {fr_path} (Existe: {os.path.exists(fr_path)})")
        print(f"Chemin en.json : {en_path} (Existe: {os.path.exists(en_path)})")
        print(f"Chemin es.json : {es_path} (Existe: {os.path.exists(es_path)})")

        # Charger ou cr√©er les fichiers
        def load_or_create(path):
            if os.path.exists(path):
                try:
                    with open(path, "r", encoding="utf-8") as f:
                        content = f.read()
                        if not content.strip():
                            print(f"‚ö†Ô∏è Fichier {os.path.basename(path)} est vide")
                            return {}

                        try:
                            data = json.loads(content)
                            if not isinstance(data, dict):
                                print(f"‚ö†Ô∏è Fichier {os.path.basename(path)} n'est pas un dictionnaire JSON valide")
                                return {}
                            print(f"Fichier {os.path.basename(path)} charg√© avec {len(data)} cl√©s")
                            return data
                        except json.JSONDecodeError as e:
                            print(f"‚ùå Erreur de d√©codage JSON pour {path}: {e}")
                            print(f"Contenu probl√©matique: {content[:100]}...")
                            if self.ask_yes_no(f"Le fichier {os.path.basename(path)} contient du JSON invalide. Voulez-vous le recr√©er vide?"):
                                with open(path, "w", encoding="utf-8") as f:
                                    json.dump({}, f, indent=2, ensure_ascii=False)
                                return {}
                            else:
                                return {}
                except Exception as e:
                    print(f"‚ùå Erreur lors de la lecture de {path}: {e}")
                    return {}
            else:
                print(f"Fichier {os.path.basename(path)} n'existe pas, cr√©ation...")
                with open(path, "w", encoding="utf-8") as f:
                    json.dump({}, f, indent=2, ensure_ascii=False)
                return {}

        # Charger les donn√©es des fichiers
        fr_data = load_or_create(fr_path)
        en_data = load_or_create(en_path)
        es_data = load_or_create(es_path)

        # Afficher clairement les donn√©es charg√©es
        print(f"\n-------- D√âBOGUE DONN√âES CHARG√âES --------")
        print(f"Cl√©s fr.json : {len(fr_data)} cl√©s")
        if len(fr_data) > 0:
            print(f"Premi√®res 3 cl√©s fr.json : {list(fr_data.keys())[:3]}")
        print(f"Cl√©s en.json : {len(en_data)} cl√©s")
        print(f"Cl√©s es.json : {len(es_data)} cl√©s")

        # V√©rifier que fr.json contient des donn√©es, sinon prendre toutes les cl√©s
        if fr_data:
            all_keys = list(fr_data.keys())
            print(f"Utilisation des {len(all_keys)} cl√©s de fr.json")
        else:
            # Si fr.json est vide, utiliser la combinaison de toutes les cl√©s
            all_keys = sorted(set(list(fr_data.keys()) + list(en_data.keys()) + list(es_data.keys())))
            print(f"fr.json vide, utilisation de l'union de toutes les cl√©s: {len(all_keys)} cl√©s")

        print("----------------------------------------")

        # Si aucune cl√© n'est trouv√©e, ne pas afficher la cl√© "nouvelle_cle"
        translations = {"fr": fr_data, "en": en_data, "es": es_data}
        self.show_flat_json_editor(all_keys, translations, fr_path, en_path, es_path)
        self.status.config(text=f"‚úÖ Fichiers charg√©s : {len(all_keys)} cl√©s trouv√©es")

    def show_flat_json_editor(self, all_keys, translations, fr_path, en_path, es_path):
        """Affiche l'√©diteur de fichiers JSON plats"""
        # Si aucune cl√© n'est trouv√©e, ajouter une cl√© par d√©faut
        if not all_keys:
            all_keys = ["nouvelle_cle"]
            for lang in ["fr", "en", "es"]:
                translations[lang]["nouvelle_cle"] = ""

        # Cr√©er la fen√™tre d'√©dition
        editor_window = tk.Toplevel(self.root)
        editor_window.title("√âditeur JSON")
        editor_window.geometry("1200x800")
        editor_window.configure(bg=COL_BG_TOPBAR)

        # Stocker les chemins des fichiers dans editor_window pour pouvoir y acc√©der plus tard
        # type: ignore - Pylance ne reconna√Æt pas qu'on ajoute des attributs dynamiques aux widgets Tkinter
        editor_window.fr_path = fr_path  # type: ignore
        editor_window.en_path = en_path  # type: ignore
        editor_window.es_path = es_path  # type: ignore

        # D√©sactiver temporairement le raccourci Ctrl+F global pour √©viter les conflits
        self.root.unbind("<Control-f>")

        # Cadre principal avec barre d'outils
        main_container = tk.Frame(editor_window, bg=COL_BG_TOPBAR)
        main_container.pack(fill="both", expand=True)

        # Barre d'outils en haut
        toolbar = tk.Frame(main_container, bg=COL_BG_TOPBAR, height=40)
        toolbar.pack(fill="x", side="top")

        # Configuration de la barre d'outils avec le bouton de recherche
        self.setup_flat_editor_toolbar(editor_window, toolbar)

        # Conteneur pour la table d'√©dition
        table_container = tk.Frame(main_container, bg=COL_BG_TOPBAR)
        table_container.pack(fill="both", expand=True, padx=10, pady=5)

        # Cr√©er un canvas avec scrollbar
        canvas = tk.Canvas(table_container, bg=COL_BG_TOPBAR, highlightthickness=0)
        scrollbar_y = ttk.Scrollbar(table_container, orient="vertical", command=canvas.yview)
        scrollbar_x = ttk.Scrollbar(table_container, orient="horizontal", command=canvas.xview)

        # Configuration de la mise en page
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar_y.pack(side="right", fill="y")
        scrollbar_x.pack(side="bottom", fill="x")
        canvas.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)

        # Frame pour contenir la grille
        grid_frame = tk.Frame(canvas, bg=COL_BG_TOPBAR)
        canvas_window = canvas.create_window((0, 0), window=grid_frame, anchor="nw")

        # Stocker les r√©f√©rences importantes pour la recherche
        # type: ignore - Pylance ne reconna√Æt pas qu'on ajoute des attributs dynamiques aux widgets Tkinter
        editor_window.grid_frame = grid_frame  # type: ignore
        editor_window.canvas = canvas  # type: ignore
        editor_window.all_keys = all_keys  # type: ignore
        editor_window.entry_vars = {}  # type: ignore

        # En-t√™tes
        headers = ["Cl√©", "Fran√ßais", "Anglais", "Espagnol", ""]
        header_bg = COL_BG_TOPBAR
        header_fg = "white"

        # Configuration des colonnes
        for col in range(5):
            grid_frame.grid_columnconfigure(col, weight=1, minsize=200 if col < 4 else 50)

        # Cr√©ation des en-t√™tes
        for col, header in enumerate(headers):
            tk.Label(grid_frame, text=header, bg=header_bg, fg=header_fg,
                    font=FONT_TITLE, anchor="w", padx=5).grid(
                    row=0, column=col, sticky="ew", padx=2, pady=5)

        # Cr√©er les lignes pour chaque cl√©
        row_colors = [COL_BG_ROW, COL_BG_ROW_ALT]
        for row_idx, key in enumerate(all_keys, start=1):
            row_color = row_colors[row_idx % 2]

            # Colonne cl√©
            key_label = tk.Label(grid_frame, text=key, bg=row_color, fg=COL_FG_TEXT,
                               font=FONT_DEFAULT, anchor="w", padx=5)
            key_label.grid(row=row_idx, column=0, sticky="ew", padx=2, pady=3)

            # Colonnes traductions
            for col_idx, lang in enumerate(["fr", "en", "es"], start=1):
                var = tk.StringVar(value=translations[lang].get(key, ""))
                entry = tk.Entry(grid_frame, textvariable=var, bg=COL_EDIT_BG,
                               fg=COL_EDIT_FG, font=FONT_DEFAULT)
                entry.grid(row=row_idx, column=col_idx, sticky="ew", padx=2, pady=3)
                editor_window.entry_vars[(row_idx, lang)] = var  # type: ignore

            # Bouton traduction par ligne
            translate_btn = tk.Button(grid_frame, text="üåê", font=FONT_DEFAULT,
                                   command=lambda r=row_idx: self.translate_row(editor_window, r))
            translate_btn.grid(row=row_idx, column=4, padx=2, pady=3)

        # Configuration du scroll et des √©v√©nements
        def on_frame_configure(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        grid_frame.bind("<Configure>", on_frame_configure)

        def on_canvas_configure(event):
            canvas.itemconfig(canvas_window, width=event.width)
        canvas.bind("<Configure>", on_canvas_configure)

        # Raccourci clavier pour la recherche
        editor_window.bind("<Control-f>", lambda event: self.show_flat_search(editor_window))

        # Configuration de la fermeture
        def on_editor_close():
            self.root.bind("<Control-f>", lambda e: self.show_search())
            editor_window.destroy()
        editor_window.protocol("WM_DELETE_WINDOW", on_editor_close)

    def translate_row(self, editor_window, row):
        """Traduit une ligne sp√©cifique du fran√ßais vers l'anglais et l'espagnol"""
        fr_text = editor_window.entry_vars.get((row, "fr"))
        if fr_text and fr_text.get().strip():
            try:
                # Effet visuel de d√©but de traduction
                for widget in editor_window.grid_frame.grid_slaves(row=row):
                    widget.config(bg=COL_AMBER)
                editor_window.update_idletasks()

                # Traduire vers l'anglais
                en_trad = self.translate_text(fr_text.get(), "en")
                editor_window.entry_vars[(row, "en")].set(en_trad)

                # Traduire vers l'espagnol
                es_trad = self.translate_text(fr_text.get(), "es")
                editor_window.entry_vars[(row, "es")].set(es_trad)

                # Effet visuel de succ√®s
                for widget in editor_window.grid_frame.grid_slaves(row=row):
                    widget.config(bg=COL_GREEN)
                    editor_window.after(500, lambda w=widget: w.config(
                        bg=COL_BG_ROW if row % 2 == 1 else COL_BG_ROW_ALT))

                # Mettre √† jour le statut
                if hasattr(editor_window, 'status_bar'):
                    editor_window.status_bar.config(text=f"‚úÖ Ligne {row} traduite avec succ√®s")

            except Exception as e:
                print(f"Erreur lors de la traduction de la ligne {row}: {e}")
                # Effet visuel d'erreur
                for widget in editor_window.grid_frame.grid_slaves(row=row):
                    widget.config(bg=COL_RED)
                    editor_window.after(500, lambda w=widget: w.config(
                        bg=COL_BG_ROW if row % 2 == 1 else COL_BG_ROW_ALT))

                if hasattr(editor_window, 'status_bar'):
                    editor_window.status_bar.config(text=f"‚ùå Erreur de traduction ligne {row}")

    def setup_flat_editor_toolbar(self, editor_window, toolbar):
        # Bouton pour sauvegarder les fichiers
        save_btn = tk.Button(toolbar,
                            text="üíæ Sauvegarder",
                            command=lambda: self.save_flat_files(editor_window),
                            bg=COL_BG_TOPBAR,
                            fg="white",
                            font=FONT_DEFAULT,
                            relief="flat",
                            padx=10,
                            pady=5)
        save_btn.pack(side="left", padx=15, pady=5)

        # Bouton de recherche avec style coh√©rent
        search_btn = tk.Button(toolbar,
                              text="üîç Rechercher",
                              command=lambda: self.show_flat_search(editor_window),
                              bg=COL_BG_TOPBAR,
                              fg="white",
                              font=FONT_DEFAULT,
                              relief="flat",
                              padx=10,
                              pady=5)
        search_btn.pack(side="left", padx=15, pady=5)

        # Bouton pour traduire toutes les entr√©es
        translate_all_btn = tk.Button(toolbar,
                                    text="üåê Traduire tout",
                                    command=lambda: self.translate_all(editor_window),
                                    bg=COL_BG_TOPBAR,
                                    fg="white",
                                    font=FONT_DEFAULT,
                                    relief="flat",
                                    padx=10,
                                    pady=5)
        translate_all_btn.pack(side="left", padx=15, pady=5)

    def show_flat_search(self, editor_window):
        """Affiche la barre de recherche pour l'√©diteur de fichiers plats"""
        # Fermer la barre de recherche existante si elle existe
        if hasattr(editor_window, 'search_frame') and editor_window.search_frame:
            editor_window.search_frame.destroy()
            editor_window.search_frame = None

        # Cr√©er la barre de recherche
        editor_window.search_frame = tk.Frame(editor_window, bg=COL_BG_TOPBAR)
        editor_window.search_frame.pack(fill="x", after=editor_window.winfo_children()[0])

        # Container gauche pour le champ de recherche
        search_container = tk.Frame(editor_window.search_frame, bg=COL_BG_TOPBAR)
        search_container.pack(side="left", fill="x", expand=True)

        # Container droit pour les boutons
        buttons_container = tk.Frame(editor_window.search_frame, bg=COL_BG_TOPBAR)
        buttons_container.pack(side="right", fill="x")

        # Ic√¥ne et champ de recherche
        search_label = tk.Label(search_container, text="üîç", bg=COL_BG_TOPBAR, fg="white",
                             font=("Segoe UI", 12))
        search_label.pack(side="left", padx=(10, 0))

        editor_window.search_var = tk.StringVar()
        search_entry = tk.Entry(search_container, textvariable=editor_window.search_var, width=40,
                             bg=COL_EDIT_BG, fg=COL_EDIT_FG, font=FONT_DEFAULT,
                             insertbackground="white")
        search_entry.pack(side="left", padx=10)

        # Compteur de r√©sultats
        editor_window.results_label = tk.Label(search_container, text="", bg=COL_BG_TOPBAR,
                                   fg="white", font=FONT_DEFAULT)
        editor_window.results_label.pack(side="left", padx=10)

        # Style commun pour les boutons
        button_style = {
            "bg": COL_BG_TOPBAR,
            "fg": "white",
            "font": FONT_DEFAULT,
            "relief": "flat",
            "padx": 10,
            "pady": 5
        }

        # Boutons de navigation
        tk.Button(buttons_container, text="‚óÄ", command=lambda: self.prev_flat_search_result(editor_window),
                 **button_style).pack(side="left", padx=2)
        tk.Button(buttons_container, text="‚ñ∂", command=lambda: self.next_flat_search_result(editor_window),
                 **button_style).pack(side="left", padx=2)

        # Bouton fermer
        tk.Button(buttons_container, text="‚úñ", command=lambda: self.close_flat_search(editor_window),
                 **button_style).pack(side="left", padx=(10, 5))

        # Configuration de la recherche en temps r√©el
        editor_window.search_var.trace_add("write", lambda *args: self.flat_search_as_you_type(editor_window))
        search_entry.bind("<Return>", lambda e: self.next_flat_search_result(editor_window))
        search_entry.bind("<Escape>", lambda e: self.close_flat_search(editor_window))

        # Initialiser les variables de recherche
        editor_window.search_results = []
        editor_window.current_search_index = -1

        # Focus sur le champ de recherche
        search_entry.focus_set()
        print("Barre de recherche plate affich√©e")

    def close_flat_search(self, editor_window):
        """Ferme la barre de recherche pour l'√©diteur de fichiers plats."""
        if hasattr(editor_window, 'search_frame') and editor_window.search_frame:
            editor_window.search_frame.destroy()
            editor_window.search_frame = None
        editor_window.search_results = []
        editor_window.current_search_index = -1
        self.clear_flat_search_highlights(editor_window)

    def clear_flat_search_highlights(self, editor_window):
        """R√©initialise les surlignages de recherche dans l'√©diteur de fichiers plats."""
        for row_idx in range(1, len(editor_window.all_keys) + 1):
            for widget in editor_window.grid_frame.grid_slaves(row=row_idx):
                widget.config(bg=COL_BG_ROW if row_idx % 2 == 1 else COL_BG_ROW_ALT)

    def flat_search_as_you_type(self, editor_window):
        """Recherche en temps r√©el dans l'√©diteur de fichiers plats"""
        search_text = editor_window.search_var.get().strip()
        if not search_text:
            editor_window.search_results = []
            editor_window.current_search_index = -1
            self.clear_flat_search_highlights(editor_window)
            return

        # Effectuer la recherche dans les cl√©s et les valeurs
        results = []
        for row_idx, key in enumerate(editor_window.all_keys, start=1):
            if search_text.lower() in key.lower():
                results.append(row_idx)

        editor_window.search_results = results
        if results:
            editor_window.current_search_index = 0
            self.highlight_flat_search_result(editor_window, results[0])
        else:
            self.clear_flat_search_highlights(editor_window)

    def highlight_flat_search_result(self, editor_window, row_idx):
        """Met en √©vidence un r√©sultat de recherche sp√©cifique et d√©file jusqu'√† lui si n√©cessaire."""
        self.clear_flat_search_highlights(editor_window)

        # Mettre en surbrillance la ligne trouv√©e
        for widget in editor_window.grid_frame.grid_slaves(row=row_idx):
            if isinstance(widget, (tk.Label, tk.Canvas)):
                widget.config(bg=COL_SEARCH_HIGHLIGHT)

        # Mettre √† jour le compteur de r√©sultats
        total_results = len(editor_window.search_results)
        current_index = editor_window.current_search_index + 1
        if total_results > 0:
            editor_window.results_label.config(text=f"{current_index}/{total_results}")

        # Calculer les coordonn√©es de la ligne dans le canvas
        widget = editor_window.grid_frame.grid_slaves(row=row_idx)[0]
        widget_y = widget.winfo_y()
        canvas_height = editor_window.canvas.winfo_height()

        # Obtenir les coordonn√©es actuelles de la vue
        current_view_top = editor_window.canvas.yview()[0] * editor_window.grid_frame.winfo_height()
        current_view_bottom = editor_window.canvas.yview()[1] * editor_window.grid_frame.winfo_height()

        # Si le widget n'est pas compl√®tement visible, d√©filer jusqu'√† lui
        if widget_y < current_view_top or widget_y + widget.winfo_height() > current_view_bottom:
            # Calculer la nouvelle position de d√©filement pour centrer le r√©sultat
            new_y = (widget_y - (canvas_height / 2)) / editor_window.grid_frame.winfo_height()
            # Limiter la position entre 0 et 1
            new_y = max(0, min(1, new_y))
            editor_window.canvas.yview_moveto(new_y)

        editor_window.update_idletasks()  # Assurer que l'interface est mise √† jour

    def next_flat_search_result(self, editor_window):
        """Passe au r√©sultat de recherche suivant dans l'√©diteur plat."""
        if not editor_window.search_results:
            return

        editor_window.current_search_index = (editor_window.current_search_index + 1) % len(editor_window.search_results)
        self.highlight_flat_search_result(editor_window, editor_window.search_results[editor_window.current_search_index])

    def prev_flat_search_result(self, editor_window):
        """Passe au r√©sultat de recherche pr√©c√©dent dans l'√©diteur plat."""
        if not editor_window.search_results:
            return

        editor_window.current_search_index = (editor_window.current_search_index - 1) % len(editor_window.search_results)
        self.highlight_flat_search_result(editor_window, editor_window.search_results[editor_window.current_search_index])

    def translate_text(self, text, target_lang):
        """Traduit un texte fran√ßais vers la langue cible"""
        try:
            # Appeler la fonction de traduction import√©e
            translated = traduire(text, target_lang)
            return translated
        except Exception as e:
            print(f"Erreur lors de la traduction: {e}")
            return text

    def ask_yes_no(self, question):
        """Affiche une bo√Æte de dialogue oui/non et retourne True si l'utilisateur clique sur Oui"""
        return messagebox.askyesno("Question", question)

    def translate_all(self, editor_window):
        """Traduit toutes les valeurs fran√ßaises vers l'anglais et l'espagnol"""
        if not hasattr(editor_window, 'all_keys') or not editor_window.all_keys:
            return

        # Confirmer l'op√©ration
        if not messagebox.askyesno("Confirmation", "Voulez-vous traduire toutes les entr√©es fran√ßaises vers l'anglais et l'espagnol?"):
            return

        # Afficher un popup de chargement
        popup = tk.Toplevel(editor_window)
        popup.title("Traduction en cours")
        popup.geometry("300x100")
        popup.transient(editor_window)
        popup.grab_set()

        # Ajouter une barre de progression
        progress_var = tk.DoubleVar()
        progress_label = tk.Label(popup, text="Traduction en cours...", font=FONT_DEFAULT)
        progress_label.pack(pady=(10, 5))
        progress_bar = ttk.Progressbar(popup, variable=progress_var, maximum=100)
        progress_bar.pack(fill="x", padx=20)

        try:
            # Nombre de cl√©s √† traduire et compteur
            total = len(editor_window.all_keys)
            translated = 0

            # Pour chaque cl√©
            for row_idx, key in enumerate(editor_window.all_keys, start=1):
                # Obtenir le texte fran√ßais
                fr_text = editor_window.entry_vars.get((row_idx, "fr"))
                if fr_text and fr_text.get().strip():
                    try:
                        # Traduire vers l'anglais
                        en_trad = self.translate_text(fr_text.get(), "en")
                        editor_window.entry_vars[(row_idx, "en")].set(en_trad)

                        # Traduire vers l'espagnol
                        es_trad = self.translate_text(fr_text.get(), "es")
                        editor_window.entry_vars[(row_idx, "es")].set(es_trad)

                        translated += 1

                        # Mettre √† jour la barre de progression
                        progress = (translated / total) * 100
                        progress_var.set(progress)
                        progress_label.config(text=f"Traduction en cours... ({translated}/{total})")
                        popup.update()

                    except Exception as e:
                        print(f"Erreur lors de la traduction de '{fr_text.get()}': {e}")

            # Mettre √† jour le statut final
            editor_window.status_bar.config(text=f"‚úÖ {translated} sur {total} entr√©es traduites")

        except Exception as e:
            editor_window.status_bar.config(text=f"‚ùå Erreur lors de la traduction: {e}")
            print(f"Erreur lors de la traduction: {e}")
        finally:
            # Fermer le popup
            popup.destroy()

    def show_search(self):
        """Affiche la barre de recherche pour la vue hi√©rarchique"""
        # Fermer la barre de recherche existante si elle existe
        if self.search_frame:
            self.search_frame.destroy()
            self.search_frame = None

        # Cr√©er la barre de recherche
        self.search_frame = tk.Frame(self.root, bg=COL_BG_TOPBAR)
        self.search_frame.pack(fill="x", after=self.tools_frame)

        # Container gauche pour le champ de recherche
        search_container = tk.Frame(self.search_frame, bg=COL_BG_TOPBAR)
        search_container.pack(side="left", fill="x", expand=True)

        # Container droit pour les boutons
        buttons_container = tk.Frame(self.search_frame, bg=COL_BG_TOPBAR)
        buttons_container.pack(side="right", fill="x")

        # Ic√¥ne et champ de recherche
        search_label = tk.Label(search_container, text="üîç", bg=COL_BG_TOPBAR, fg="white", font=("Segoe UI", 12))
        search_label.pack(side="left", padx=(10, 0))

        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_container, textvariable=self.search_var, width=40,
                            bg=COL_EDIT_BG, fg=COL_EDIT_FG, font=FONT_DEFAULT,
                            insertbackground="white")
        search_entry.pack(side="left", padx=10)

        # Compteur de r√©sultats
        self.results_label = tk.Label(search_container, text="", bg=COL_BG_TOPBAR, fg="white", font=FONT_DEFAULT)
        self.results_label.pack(side="left", padx=10)

        # Style commun pour les boutons
        button_style = {
            "bg": COL_BG_TOPBAR,
            "fg": "white",
            "font": FONT_DEFAULT,
            "relief": "flat",
            "padx": 10,
            "pady": 5
        }

        # Boutons de navigation
        tk.Button(buttons_container, text="‚óÄ", command=self.prev_search_result, **button_style).pack(side="left", padx=2)
        tk.Button(buttons_container, text="‚ñ∂", command=self.next_search_result, **button_style).pack(side="left", padx=2)

        # Bouton fermer
        tk.Button(buttons_container, text="‚úñ", command=self.close_search, **button_style).pack(side="left", padx=(10, 5))

        # Configuration de la recherche en temps r√©el
        self.search_var.trace_add("write", lambda *args: self.search_as_you_type())
        search_entry.bind("<Return>", lambda e: self.next_search_result())
        search_entry.bind("<Escape>", lambda e: self.close_search())

        # Initialiser les variables de recherche
        self.search_results = []
        self.current_search_index = -1

        # Focus sur le champ de recherche
        search_entry.focus_set()

    def close_search(self):
        """Ferme la barre de recherche hi√©rarchique"""
        if self.search_frame:
            self.search_frame.destroy()
            self.search_frame = None
        self.search_results = []
        self.current_search_index = -1
        self.clear_search_highlights()

    def clear_search_highlights(self):
        """R√©initialise les surlignages de recherche dans la vue hi√©rarchique"""
        for column in self.columns:
            # Utiliser enumerate pour obtenir l'index de chaque ligne
            for idx, row in enumerate(column.winfo_children()):
                if isinstance(row, tk.Frame):
                    bg_color = COL_BG_ROW if idx % 2 == 1 else COL_BG_ROW_ALT
                    row.configure(bg=bg_color)  # Configurer le bg du frame parent
                    for widget in row.winfo_children():
                        if isinstance(widget, (tk.Label, tk.Canvas)):
                            widget.configure(bg=bg_color)

    def search_as_you_type(self):
        """Recherche en temps r√©el dans la vue hi√©rarchique"""
        search_text = self.search_var.get().strip().lower()
        if not search_text:
            self.search_results = []
            self.current_search_index = -1
            self.clear_search_highlights()
            self.results_label.config(text="")
            return

        # Effectuer la recherche dans toutes les colonnes
        results = []
        for column in self.columns:
            for row in column.winfo_children():
                if isinstance(row, tk.Frame):
                    for widget in row.winfo_children():
                        if isinstance(widget, tk.Label) and search_text in widget.cget("text").lower():
                            results.append((column, row))
                            break

        self.search_results = results
        if results:
            self.current_search_index = 0
            self.highlight_search_result(results[0])
        else:
            self.clear_search_highlights()
            self.results_label.config(text="0/0")

    def highlight_search_result(self, result):
        """Met en √©vidence un r√©sultat de recherche sp√©cifique"""
        self.clear_search_highlights()
        column, row = result

        # Mettre en surbrillance la ligne trouv√©e
        row.configure(bg=COL_SEARCH_HIGHLIGHT)  # Configurer le bg du frame parent
        for widget in row.winfo_children():
            if isinstance(widget, (tk.Label, tk.Canvas)):
                widget.configure(bg=COL_SEARCH_HIGHLIGHT)

        # Mettre √† jour le compteur de r√©sultats
        if self.search_results:
            current_index = self.current_search_index + 1
            total_results = len(self.search_results)
            self.results_label.config(text=f"{current_index}/{total_results}")

        # S'assurer que le r√©sultat est visible
        self.ensure_result_visible(column, row)

    def ensure_result_visible(self, column, row):
        """S'assure qu'un r√©sultat de recherche est visible √† l'√©cran"""
        # Calculer les coordonn√©es de la ligne dans le canvas
        bbox = self.main_canvas.bbox("all")
        if not bbox:
            return

        widget_y = row.winfo_y()
        canvas_height = self.main_canvas.winfo_height()

        # Obtenir les coordonn√©es actuelles de la vue
        current_view_top = self.main_canvas.yview()[0] * bbox[3]
        current_view_bottom = self.main_canvas.yview()[1] * bbox[3]

        # Si le widget n'est pas compl√®tement visible, d√©filer jusqu'√† lui
        if widget_y < current_view_top or widget_y + row.winfo_height() > current_view_bottom:
            # Calculer la nouvelle position de d√©filement pour centrer le r√©sultat
            new_y = (widget_y - (canvas_height / 2)) / bbox[3]
            # Limiter la position entre 0 et 1
            new_y = max(0, min(1, new_y))
            self.main_canvas.yview_moveto(new_y)

    def next_search_result(self):
        """Passe au r√©sultat de recherche suivant dans la vue hi√©rarchique"""
        if not self.search_results:
            return
        self.current_search_index = (self.current_search_index + 1) % len(self.search_results)
        self.highlight_search_result(self.search_results[self.current_search_index])

    def prev_search_result(self):
        """Passe au r√©sultat de recherche pr√©c√©dent dans la vue hi√©rarchique"""
        if not self.search_results:
            return
        self.current_search_index = (self.current_search_index - 1) % len(self.search_results)
        self.highlight_search_result(self.search_results[self.current_search_index])

    def save_flat_files(self, editor_window):
        """Sauvegarde les fichiers JSON plats"""
        try:
            # R√©cup√©rer les donn√©es
            fr_data = {}
            en_data = {}
            es_data = {}

            for key in editor_window.all_keys:
                for row_idx, k in enumerate(editor_window.all_keys, start=1):
                    if k == key:
                        fr_data[key] = editor_window.entry_vars[(row_idx, "fr")].get()
                        en_data[key] = editor_window.entry_vars[(row_idx, "en")].get()
                        es_data[key] = editor_window.entry_vars[(row_idx, "es")].get()
                        break

            # Sauvegarder les fichiers
            files_to_save = [
                (editor_window.fr_path, fr_data),
                (editor_window.en_path, en_data),
                (editor_window.es_path, es_data)
            ]

            for path, data in files_to_save:
                with open(path, "w", encoding="utf-8") as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)

            self.status.config(text="‚úÖ Fichiers plats sauvegard√©s")
        except Exception as e:
            self.status.config(text=f"‚ùå Erreur lors de la sauvegarde: {str(e)}")
            print(f"Erreur lors de la sauvegarde des fichiers plats: {e}")

    def show_script_results(self, title, content, is_success=True):
        """Affiche les r√©sultats d'un script dans une fen√™tre de dialogue"""
        popup = tk.Toplevel(self.root)
        popup.title(title)
        popup.geometry("800x600")

        popup.transient(self.root)
        popup.resizable(True, True)

        # Configuration de la couleur de fond selon le succ√®s
        bg_color = COL_BG_MAIN
        text_color = COL_FG_TEXT if is_success else COL_RED

        popup.configure(bg=bg_color)

        # Frame pour le titre
        title_frame = tk.Frame(popup, bg=bg_color)
        title_frame.pack(fill="x", padx=10, pady=5)

        title_label = tk.Label(title_frame,
                              text=title,
                              font=FONT_TITLE,
                              bg=bg_color,
                              fg=text_color)
        title_label.pack()

        # Zone de texte avec scrollbar
        text_frame = tk.Frame(popup, bg=bg_color)
        text_frame.pack(fill="both", expand=True, padx=10, pady=5)

        text_widget = tk.Text(text_frame,
                             bg=COL_EDIT_BG,
                             fg=COL_FG_TEXT,
                             font=FONT_DEFAULT,
                             wrap=tk.WORD)

        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_widget.yview)
        text_widget.configure(yscrollcommand=scrollbar.set)

        text_widget.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Ins√©rer le contenu
        text_widget.insert(tk.END, content)
        text_widget.config(state=tk.DISABLED)

        # Bouton de fermeture
        button_frame = tk.Frame(popup, bg=bg_color)
        button_frame.pack(fill="x", padx=10, pady=5)

        close_btn = ttk.Button(button_frame, text="Fermer", command=popup.destroy)
        close_btn.pack(side="right")        # Centrer la fen√™tre
        popup.update_idletasks()
        x = (popup.winfo_screenwidth() // 2) - (popup.winfo_width() // 2)
        y = (popup.winfo_screenheight() // 2) - (popup.winfo_height() // 2)
        popup.geometry(f"+{x}+{y}")


if __name__ == "__main__":
    try:
        print("üöÄ D√©marrage de l'application Fault Editor...")
        root = tk.Tk()
        app = FaultEditor(root)
        print("‚úÖ Interface utilisateur initialis√©e")
        root.mainloop()
    except Exception as e:
        print(f"‚ùå Erreur fatale au d√©marrage : {e}")
        import traceback
        traceback.print_exc()

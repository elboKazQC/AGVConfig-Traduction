#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Main Application Controller - Complete Interface

This module provides the complete main application controller that fully recreates
the original Fault Editor interface with all its functionalities, using the new
modular architecture underneath.

Author: AI Assistant
Created: 2024
"""

import os
import sys
import json
import logging
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import glob
import subprocess
import re
from functools import partial
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple

# Import modular components
from config.constants import Colors, Fonts, Messages, Dimensions
from models.data_models import ApplicationState
from translation.translation_manager import TranslationManager
from ui.flat_editor import FlatEditor

# Import translation function directly for compatibility
try:
    from translate import traduire
except ImportError:
    logger = logging.getLogger(__name__)
    logger.warning("translate module not found - translation features may be limited")
    traduire = None

# Configure logging
logger = logging.getLogger(__name__)

# Styles pour les alarmes (from original app)
ALARM_STYLES = {
    "error": {"bg": "#f44336", "fg": "#ffffff"},
    "warning": {"bg": "#ffc107", "fg": "#000000"},
    "info": {"bg": "#2196f3", "fg": "#ffffff"},
    "success": {"bg": "#4caf50", "fg": "#ffffff"}
}


class FaultEditorController:
    """
    Main application controller that recreates the complete original interface
    while using the new modular architecture underneath.
    """

    def __init__(self, root: tk.Tk):
        """Initialize the complete fault editor interface."""
        logger.info("üöÄ Initializing complete Fault Editor interface")

        self.root = root
        self.root.title(Messages.APP_TITLE)
        self.root.geometry(Dimensions.MAIN_WINDOW_SIZE)        # Initialize application state
        self.app_state = ApplicationState()

        # Initialize translation manager
        self.translation_manager = TranslationManager()

        # Initialize flat editor
        self.flat_editor = FlatEditor(root, self.translation_manager)

        # Original application variables
        self.lang = "fr"
        self.file_map = {}
        self.data_map = {}
        self.path_map = {}
        self.columns = []  # Liste des colonnes cr√©√©es
        self.current_path = [0, 255, 255, 255]  # Chemin courant
        self.editing_info = None  # Dictionnaire contenant les infos de l'√©dition en cours
        self.base_dir = None  # Dossier courant pour les fichiers JSON
        self.search_results = []  # Pour stocker les r√©sultats de recherche
        self.current_search_index = -1  # Index actuel dans les r√©sultats
        self.search_mode = "hierarchical"  # Mode de recherche (hierarchical ou flat)
        self.search_frame = None  # Frame pour la barre de recherche
        self.current_file_path = None  # Chemin du fichier actuellement s√©lectionn√©

        # Setup the complete UI
        self.setup_ui()

        logger.info("‚úÖ Complete Fault Editor interface initialized")

    def setup_ui(self):
        """Setup the complete user interface exactly like the original."""
        logger.info("üé® Setting up complete user interface")

        # Configure styles
        style = ttk.Style()
        style.configure('TRadiobutton', font=Fonts.TOPBAR)
        style.configure('TButton', font=Fonts.TOPBAR)

        # Barre sup√©rieure avec logo
        topbar = tk.Frame(self.root, bg=Colors.BG_TOPBAR, height=Dimensions.TOPBAR_HEIGHT)
        topbar.pack(fill="x")
        topbar.pack_propagate(False)

        # Logo Noovelia
        logo_frame = tk.Frame(topbar, bg=Colors.BG_TOPBAR)
        logo_frame.pack(side="left", padx=10)
        logo_label = tk.Label(logo_frame, text="noovelia", font=("Segoe UI", 16),
                             bg=Colors.BG_TOPBAR, fg="white")
        logo_label.pack(side="left")

        # Boutons de la barre sup√©rieure
        buttons_frame = tk.Frame(topbar, bg=Colors.BG_TOPBAR)
        buttons_frame.pack(side="right", padx=10)

        # Bouton de recherche
        search_btn = tk.Button(buttons_frame, text="üîç Rechercher",
                              command=lambda: self.show_search(),
                              bg=Colors.BG_TOPBAR, fg="white",
                              font=Fonts.DEFAULT,
                              relief="flat", padx=10, pady=5)
        search_btn.pack(side="right", padx=(10, 2))

        # Boutons d'ouverture de fichiers
        open_btn = ttk.Button(buttons_frame, text="üìÇ Ouvrir un dossier", command=self.open_folder)
        open_btn.pack(side="right", padx=2)

        load_flat_btn = ttk.Button(buttons_frame, text="üìÑ Charger JSON plat", command=self.load_flat_json)
        load_flat_btn.pack(side="right", padx=2)

        # S√©lecteur de langue
        lang_frame = tk.Frame(buttons_frame, bg=Colors.BG_TOPBAR)
        lang_frame.pack(side="right", padx=10)

        self.lang_var = tk.StringVar(value="fr")
        ttk.Radiobutton(lang_frame, text="FR", value="fr", variable=self.lang_var,
                       command=self.reload_lang).pack(side="left", padx=2)
        ttk.Radiobutton(lang_frame, text="EN", value="en", variable=self.lang_var,
                       command=self.reload_lang).pack(side="left", padx=2)
        ttk.Radiobutton(lang_frame, text="ES", value="es", variable=self.lang_var,
                       command=self.reload_lang).pack(side="left", padx=2)

        # Cadre des outils (pour pouvoir d√©sactiver/activer les boutons)
        self.tools_frame = tk.Frame(self.root, bg=Colors.BG_MAIN, height=Dimensions.TOOLBAR_HEIGHT)
        self.tools_frame.pack(fill="x", side="top", pady=(0, 5))
        self.tools_frame.pack_propagate(False)

        # Boutons de synchronisation et outils
        btn_sync_all = ttk.Button(self.tools_frame, text="Synchroniser tous les fichiers",
                                 command=self.run_sync_all)
        btn_sync_all.pack(side="left", padx=5)

        # Champ pour synchroniser un fichier sp√©cifique
        self.sync_one_var = tk.StringVar()
        tk.Label(self.tools_frame, text="Fichier √† synchroniser:",
                bg=Colors.BG_MAIN, fg="white").pack(side="left", padx=(10,1))
        ttk.Entry(self.tools_frame, textvariable=self.sync_one_var, width=25).pack(side="left")
        btn_sync_one = ttk.Button(self.tools_frame, text="Synchroniser ce fichier",
                                 command=self.run_sync_one)
        btn_sync_one.pack(side="left", padx=5)

        # Outils de g√©n√©ration de fichiers
        self.genfichier_file_var = tk.StringVar()
        self.genfichier_src_var = tk.StringVar(value="fr")
        self.genfichier_tgt_var = tk.StringVar(value="en")

        tk.Label(self.tools_frame, text="gen_fichier:",
                bg=Colors.BG_MAIN, fg="white").pack(side="left", padx=(10,1))
        ttk.Entry(self.tools_frame, textvariable=self.genfichier_file_var, width=20).pack(side="left")
        tk.Label(self.tools_frame, text="src:",
                bg=Colors.BG_MAIN, fg="white").pack(side="left", padx=(10,1))
        ttk.Entry(self.tools_frame, textvariable=self.genfichier_src_var, width=5).pack(side="left")
        tk.Label(self.tools_frame, text="tgt:",
                bg=Colors.BG_MAIN, fg="white").pack(side="left", padx=(10,1))
        ttk.Entry(self.tools_frame, textvariable=self.genfichier_tgt_var, width=5).pack(side="left")

        btn_genfichier = ttk.Button(self.tools_frame, text="G√©n√©rer fichier",
                                   command=self.run_generer_fichier)
        btn_genfichier.pack(side="left", padx=5)

        btn_gen_manquant = ttk.Button(self.tools_frame, text="G√©n√©rer les fichiers manquants",
                                     command=self.run_generer_manquant)
        btn_gen_manquant.pack(side="left", padx=5)

        btn_check = ttk.Button(self.tools_frame, text="V√©rifier la coh√©rence",
                              command=self.run_check_coherence)
        btn_check.pack(side="left", padx=5)

        btn_spell_check = ttk.Button(self.tools_frame, text="üîç V√©rifier l'orthographe",
                                    command=self.run_spell_check)
        btn_spell_check.pack(side="left", padx=5)

        # Label pour afficher le fichier s√©lectionn√©
        self.selected_file_label = tk.Label(self.tools_frame, text="Fichier s√©lectionn√© :",
                                           bg=Colors.BG_MAIN, fg="white", font=Fonts.DEFAULT)
        self.selected_file_label.pack(side="left", padx=10)

        # Barre d'√©tat
        self.status = tk.Label(self.root, text=Messages.READY, bd=1, relief=tk.SUNKEN,
                              anchor=tk.W, bg=Colors.BG_STATUSBAR, fg="white")
        self.status.pack(side=tk.BOTTOM, fill=tk.X)

        # Configuration des styles de scrollbars
        style = ttk.Style()
        style.configure("Custom.Vertical.TScrollbar",
                       background=Colors.BG_MAIN,
                       troughcolor=Colors.BG_MAIN,
                       arrowcolor="white")
        style.configure("Custom.Horizontal.TScrollbar",
                       background=Colors.BG_MAIN,
                       troughcolor=Colors.BG_MAIN,
                       arrowcolor="white")

        # Conteneur pour le canvas et les scrollbars
        container = tk.Frame(self.root)
        container.pack(fill="both", expand=True)

        # Canvas principal pour les colonnes avec scrollbars personnalis√©es
        self.main_canvas = tk.Canvas(container, bg=Colors.BG_MAIN)
        self.main_canvas.pack(side="left", fill="both", expand=True)

        # Scrollbar verticale
        scrollbar_y = ttk.Scrollbar(container, orient="vertical",
                                  command=self.main_canvas.yview,
                                  style="Custom.Vertical.TScrollbar")
        scrollbar_y.pack(side="right", fill="y")
        self.main_canvas.configure(yscrollcommand=scrollbar_y.set)

        # Scrollbar horizontale
        scrollbar_x = ttk.Scrollbar(container, orient="horizontal",
                                  command=self.main_canvas.xview,
                                  style="Custom.Horizontal.TScrollbar")
        scrollbar_x.pack(side="bottom", fill="x")
        self.main_canvas.configure(xscrollcommand=scrollbar_x.set)
        self.scrollbar_x = scrollbar_x

        # Frame interne contenant les colonnes
        self.columns_frame = tk.Frame(self.main_canvas, bg=Colors.BG_MAIN)
        self.canvas_window = self.main_canvas.create_window((0, 0), window=self.columns_frame, anchor="nw")

        # Configuration de la zone scrollable
        self.columns_frame.bind("<Configure>",
                               lambda e: self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all")))
        self.columns_frame.bind("<Configure>",
                               lambda e: self.main_canvas.itemconfig(self.canvas_window,
                                                                    width=self.columns_frame.winfo_reqwidth()))

        # Gestion de la visibilit√© de la scrollbar horizontale
        self.main_canvas.bind("<Configure>", self.update_xscroll_visibility)
        self.columns_frame.bind("<Configure>", self.update_xscroll_visibility)

        # Ajustement de la hauteur du canvas
        self.root.bind("<Configure>", lambda e: self.main_canvas.config(height=self.root.winfo_height()))

        # Configuration de la molette de souris
        self.setup_mouse_wheel()

        # Configuration de la gestion du focus
        self.setup_focus_management()

        # Configuration des raccourcis clavier
        self.setup_keyboard_shortcuts()

        logger.info("‚úÖ Complete UI setup finished")

    def setup_mouse_wheel(self):
        """Configure mouse wheel scrolling exactly like the original."""
        def on_mousewheel(event):
            if event.state & 0x4:  # Ctrl est press√©
                # Zoom ou d√©zoom (√† impl√©menter si n√©cessaire)
                return
            elif event.state & 0x1:  # Shift est press√©
                self.main_canvas.xview_scroll(int(-1 * (event.delta / 120)), "units")
            else:
                self.main_canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

        self.root.unbind_all("<MouseWheel>")
        self.root.bind_all("<MouseWheel>", on_mousewheel)

    def setup_focus_management(self):
        """Configure focus management for Entry widgets."""
        def on_focus_in(event):
            if isinstance(event.widget, tk.Entry):
                event.widget.config(bg=Colors.EDIT_BG_FOCUS)

        def on_focus_out(event):
            if isinstance(event.widget, tk.Entry):
                event.widget.config(bg=Colors.EDIT_BG)

        self.root.bind_class("Entry", "<FocusIn>", on_focus_in)
        self.root.bind_class("Entry", "<FocusOut>", on_focus_out)

    def setup_keyboard_shortcuts(self):
        """Configure keyboard shortcuts exactly like the original."""
        self.root.bind("<Control-r>", lambda e: self.reload_root())
        self.root.bind("<Escape>", lambda e: self.unmake_editable())
        self.root.bind("<Control-f>", lambda e: self.show_search())

    def update_xscroll_visibility(self, event=None):
        """Show or hide horizontal scrollbar based on content width."""
        canvas_width = self.main_canvas.winfo_width()
        content_width = self.columns_frame.winfo_reqwidth()
        if content_width > canvas_width:
            self.scrollbar_x.pack(side="bottom", fill="x")
        else:
            self.scrollbar_x.pack_forget()

    # === FILE OPERATIONS ===

    def initialize_file_map(self, folder):
        """Initialize the file map for the given folder."""
        logger.info(f"Initialisation du file_map pour le dossier: {folder}")
        self.file_map.clear()
        for root_dir, _, files in os.walk(folder):
            for file in files:
                if file.endswith(".json"):
                    self.file_map[file] = os.path.join(root_dir, file)
        logger.info(f"Total : {len(self.file_map)} fichiers JSON trouv√©s dans {folder}")

    def open_folder(self):
        """Open a folder dialog and load the selected directory."""
        try:
            folder = filedialog.askdirectory(title="S√©lectionner le dossier contenant les fichiers JSON")
            if folder:
                self.base_dir = folder
                self.app_state.base_directory = folder
                self.initialize_file_map(folder)
                self.load_root()
                self.status.config(text=f"‚úÖ Dossier charg√©: {folder}")
                logger.info(f"Dossier ouvert: {folder}")
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de l'ouverture du dossier: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)
            messagebox.showerror("Erreur", error_msg)

    def load_flat_json(self):
        """Load a flat JSON file for editing."""
        try:
            file_path = filedialog.askopenfilename(
                title="S√©lectionner un fichier JSON",
                filetypes=[("Fichiers JSON", "*.json"), ("Tous les fichiers", "*.*")]
            )
            if file_path:
                self.current_file_path = file_path
                self.load_flat_mode(file_path)
                self.status.config(text=f"‚úÖ Fichier JSON plat charg√©: {os.path.basename(file_path)}")
                logger.info(f"Fichier JSON plat charg√©: {file_path}")
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du chargement du fichier: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)
            messagebox.showerror("Erreur", error_msg)

    def load_root(self):
        """Load the root level of the hierarchical structure."""
        try:
            # Clear existing columns
            for col in self.columns:
                col.destroy()
            self.columns.clear()

            # Reset current path
            self.current_path = [0, 255, 255, 255]

            # Load the root level data
            self.load_level(self.current_path, 0)

            self.status.config(text="‚úÖ Interface recharg√©e depuis la racine")
            logger.info("Interface recharg√©e depuis la racine")
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du rechargement: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def load_data_for_current_language(self):
        """Load data for the current language."""
        try:
            if not self.base_dir:
                return

            # Construct filename for current language
            filename = f"faults_{self.current_path[0]:03d}_{self.current_path[1]:03d}_{self.current_path[2]:03d}_{self.current_path[3]:03d}_{self.lang}.json"
            file_path = os.path.join(self.base_dir, filename)

            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    self.data_map[self.lang] = json.load(f)
                logger.info(f"Donn√©es charg√©es pour {self.lang}: {filename}")
            else:
                self.data_map[self.lang] = {}
                logger.warning(f"Fichier non trouv√©: {filename}")

        except Exception as e:
            logger.error(f"Erreur lors du chargement des donn√©es: {e}")
            self.data_map[self.lang] = {}

    def create_first_column(self):
        """Create the first column with initial data."""
        try:
            # This is a placeholder for the actual column creation logic
            # You would implement the full hierarchical navigation here
            col_frame = tk.Frame(self.columns_frame, bg=Colors.BG_COLUMN,
                               width=Dimensions.MIN_COL_WIDTH, relief="raised", bd=1)
            col_frame.pack(side="left", fill="y", padx=1)
            col_frame.pack_propagate(False)

            # Add a header
            header = tk.Label(col_frame, text="Codes de d√©faut",
                            bg=Colors.BG_COLUMN, fg=Colors.FG_TEXT,
                            font=Fonts.TITLE, pady=10)
            header.pack(fill="x")

            # Add content area
            content_frame = tk.Frame(col_frame, bg=Colors.BG_COLUMN)
            content_frame.pack(fill="both", expand=True, padx=5, pady=5)

            # Add some sample content
            if self.data_map.get(self.lang):
                for key, value in list(self.data_map[self.lang].items())[:10]:  # Limit to first 10 items
                    item_frame = tk.Frame(content_frame, bg=Colors.BG_ROW, pady=2)
                    item_frame.pack(fill="x", pady=1)

                    label = tk.Label(item_frame, text=f"{key}: {str(value)[:50]}...",
                                   bg=Colors.BG_ROW, fg=Colors.FG_TEXT,
                                   font=Fonts.DEFAULT, anchor="w")
                    label.pack(fill="x", padx=5)
            else:
                no_data_label = tk.Label(content_frame, text="Aucune donn√©e disponible",
                                       bg=Colors.BG_COLUMN, fg=Colors.FG_TEXT,
                                       font=Fonts.DEFAULT)
                no_data_label.pack(pady=20)

            self.columns.append(col_frame)
            logger.info("Premi√®re colonne cr√©√©e")

        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de la premi√®re colonne: {e}")

    def path_to_filename(self, path):
        """Convert a path array to filename."""
        return f"faults_{'_'.join(str(p).zfill(3) for p in path)}_{self.lang}.json"

    def load_level(self, path, level):
        """Load a specific level in the hierarchy."""
        try:
            filename = self.path_to_filename(path)
            logger.info(f"Chargement du niveau {level} avec le fichier : {filename}")

            filepath = self.file_map.get(filename)
            if not filepath:
                logger.error(f"Fichier introuvable : {filename}")
                self.status.config(text=f"‚ùå Introuvable : {filename}")
                return

            # Load JSON file
            with open(filepath, "r", encoding="utf-8") as f:
                content = json.load(f)
            logger.info(f"Fichier {filename} charg√© avec succ√®s")

            # Store data
            if not hasattr(self, 'data_map'):
                self.data_map = {}
            self.data_map[filename] = content

            # Clear columns from this level onwards
            self.clear_columns_from(level)

            # Get fault list and display column
            fault_list = content.get("FaultDetailList", [])
            logger.info(f"Nombre d'items dans FaultDetailList : {len(fault_list)}")

            self.display_column(fault_list, path, filename, level)

            # Update canvas
            self.root.after(100, lambda: self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all")))
            self.main_canvas.yview_moveto(0.0)

        except Exception as e:
            error_msg = f"‚ùå Erreur lors du chargement du niveau {level}: {e}"
            logger.error(error_msg)
            self.status.config(text=error_msg)

    def clear_columns_from(self, level):
        """Clear all columns from a specific level onwards."""
        try:
            for frame in self.columns[level:]:
                frame.destroy()
            self.columns = self.columns[:level]
            self.root.update_idletasks()
            self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all"))
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage des colonnes: {e}")

    def display_column(self, fault_list, path, filename, level):
        """Display a column of faults."""
        try:
            col_index = len(self.columns)
            frame = tk.Frame(self.columns_frame, bg=Colors.BG_COLUMN)
            frame.grid(row=0, column=col_index, padx=5, pady=10, sticky="nsew")
            self.columns_frame.grid_columnconfigure(col_index, minsize=Dimensions.MIN_COL_WIDTH)
            self.columns.append(frame)

            for idx, fault in enumerate(fault_list):
                row = tk.Frame(frame, bg=Colors.BG_ROW, highlightthickness=0, highlightbackground=Colors.HIGHLIGHT)
                row.pack(fill="x", padx=4, pady=3)
                row.bind("<Enter>", lambda e, r=row: r.configure(highlightthickness=1))
                row.bind("<Leave>", lambda e, r=row: r.configure(highlightthickness=0))

                color = Colors.GREEN if fault.get("IsExpandable") else Colors.RED
                dot = tk.Canvas(row, width=14, height=14, bg=Colors.BG_ROW, highlightthickness=0)
                dot.create_oval(2, 2, 12, 12, fill=color, outline=color)
                dot.pack(side="left", padx=(6, 8))

                label_text = f"{idx}: {fault.get('Description', '(vide)')}"

                label = tk.Label(row, text=label_text, fg=Colors.FG_TEXT, bg=Colors.BG_ROW,
                               anchor="w", font=Fonts.DEFAULT)
                label.pack(side="left", fill="x", expand=True)

                label.bind("<Button-1>", partial(self.handle_single_click, fault, idx, path, level, filename))
                label.bind("<Double-1>", partial(self.handle_double_click, fault, idx, path, level, filename, row))

            self.root.update_idletasks()
            self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all"))
            self.main_canvas.yview_moveto(0.0)

        except Exception as e:
            logger.error(f"Erreur lors de l'affichage de la colonne: {e}")

    def handle_single_click(self, fault, i, path, level, fn, event):
        """Handle single click on a fault item."""
        try:
            widget = event.widget
            widget._click_job = widget.after(300, lambda: self.single_click_action(fault, i, path, level, fn))
        except Exception as e:
            logger.error(f"Erreur lors du clic simple: {e}")

    def single_click_action(self, fault, i, path, level, fn):
        """Execute single click action."""
        try:
            self.update_selected_file(fn)
            logger.info(f"Clic sur l'item {i} (Expandable={fault.get('IsExpandable')})")

            if fault.get("IsExpandable"):
                new_path = path[:]
                try:
                    insert_idx = new_path.index(255)
                except ValueError:
                    logger.error(f"Erreur : 255 non trouv√© dans {new_path}")
                    # R√©initialise le chemin si une erreur survient
                    self.current_path = [0, 255, 255, 255]
                    self.clear_columns_from(0)
                    self.load_root()
                    return

                new_path[insert_idx] = i
                if insert_idx + 1 < len(new_path):
                    new_path[insert_idx + 1] = 255

                self.current_path = new_path
                logger.info(f"Navigation vers {self.path_to_filename(new_path)}")
                self.load_level(new_path, level + 1)
        except Exception as e:
            logger.error(f"Erreur lors de l'action de clic simple: {e}")

    def handle_double_click(self, fault, i, path, level, fn, row, event):
        """Handle double click on a fault item."""
        try:
            if self.editing_info and self.editing_info["row"] != row:
                self.unmake_editable()
            self.editing_info = {"row": row, "fault": fault, "idx": i, "filename": fn, "path": path, "level": level}
            self.update_selected_file(fn)
            logger.info(f"üõ†Ô∏è Double-clic sur {i} dans {fn}")
            self.make_editable(row, fault, i, fn, path, level)
        except Exception as e:
            logger.error(f"Erreur lors du double-clic: {e}")

    def update_selected_file(self, fn):
        """Update the selected file display."""
        try:
            self.selected_file_label.config(text=f"Fichier s√©lectionn√© : {fn}")
            self.sync_one_var.set(fn)
            self.genfichier_file_var.set(fn)
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du fichier s√©lectionn√©: {e}")

    def make_editable(self, row, fault, idx, filename, path, level):
        """Make a row editable for fault modification."""
        try:
            logger.info(f"‚úèÔ∏è Modification d√©clench√©e sur l'item {idx} dans {filename}")

            # Clear existing widgets
            for widget in row.winfo_children():
                widget.destroy()

            desc_var = tk.StringVar(value=fault.get("Description", ""))
            desc_entry = tk.Entry(row, textvariable=desc_var, bg=Colors.EDIT_BG, fg=Colors.EDIT_FG,
                                highlightthickness=0, relief="flat", font=Fonts.DEFAULT)
            desc_entry.pack(side="left", padx=5, fill="both", expand=True, ipady=4)
            desc_entry.focus_set()

            def save_edit(event=None):
                try:
                    new_desc = desc_var.get()
                    fault["Description"] = new_desc

                    # Save to file
                    filepath = self.file_map.get(filename)
                    if filepath:
                        content = self.data_map.get(filename, {})
                        with open(filepath, "w", encoding="utf-8") as f:
                            json.dump(content, f, indent=2, ensure_ascii=False)
                        logger.info(f"Fichier {filename} sauvegard√©")
                        self.status.config(text=f"‚úÖ Modification sauvegard√©e dans {filename}")

                    # Restore readonly mode
                    self.render_row(row, fault, idx, path, level, filename)
                    self.editing_info = None

                except Exception as e:
                    logger.error(f"Erreur lors de la sauvegarde: {e}")
                    self.status.config(text=f"‚ùå Erreur lors de la sauvegarde: {e}")

            desc_entry.bind("<Return>", save_edit)

            # Add expandable checkbox
            exp_var = tk.BooleanVar(value=fault.get("IsExpandable", False))
            exp_check = tk.Checkbutton(row, text="Expandable", variable=exp_var,
                                     bg=Colors.BG_ROW, fg=Colors.FG_TEXT, selectcolor=Colors.BG_ROW,
                                     activebackground=Colors.BG_ROW, highlightthickness=0, bd=0,
                                     font=Fonts.DEFAULT)
            exp_check.pack(side="left", padx=5)

            # Save button
            tk.Button(row, text="‚úÖ", command=save_edit,
                     bg=Colors.BG_ROW, fg=Colors.FG_TEXT, relief="flat", font=Fonts.DEFAULT).pack(side="left", padx=5)

            row.update_idletasks()
            self.columns_frame.event_generate("<Configure>")

        except tk.TclError:
            # Widget has been destroyed (e.g., during language change), abort editing
            return
        except Exception as e:
            logger.error(f"Erreur lors de l'√©dition: {e}")

    def render_row(self, row, fault, idx, path, level, filename):
        """Render a row in readonly mode."""
        try:
            for w in row.winfo_children():
                w.destroy()

            color = Colors.GREEN if fault.get("IsExpandable") else Colors.RED
            dot = tk.Canvas(row, width=14, height=14, bg=Colors.BG_ROW, highlightthickness=0)
            dot.create_oval(2, 2, 12, 12, fill=color, outline=color)
            dot.pack(side="left", padx=(6,8))

            label_text = f"{idx}: {fault.get('Description', '(vide)')}"
            label = tk.Label(row, text=label_text, fg=Colors.FG_TEXT, bg=Colors.BG_ROW, anchor="w", font=Fonts.DEFAULT)
            label.pack(side="left", fill="x", expand=True)

            label.bind("<Button-1>", partial(self.handle_single_click, fault, idx, path, level, filename))
            label.bind("<Double-1>", partial(self.handle_double_click, fault, idx, path, level, filename, row))

        except tk.TclError:
            # Widget has been destroyed, skip rendering
            return
        except Exception as e:
            logger.error(f"Erreur lors du rendu de la ligne: {e}")

    # === LANGUAGE MANAGEMENT ===

    def reload_lang(self):
        """Reload the interface when language changes."""
        try:
            new_lang = self.lang_var.get()
            if new_lang != self.lang:
                self.lang = new_lang
                self.app_state.current_language = new_lang
                self.load_data_for_current_language()
                self.refresh_columns()
                self.status.config(text=f"‚úÖ Langue chang√©e: {new_lang.upper()}")
                logger.info(f"Langue chang√©e: {new_lang}")
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du changement de langue: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def refresh_columns(self):
        """Refresh all columns with new language data."""
        try:
            # This would refresh the existing columns with new language data
            # For now, just reload the root
            self.load_root()
        except Exception as e:
            logger.error(f"Erreur lors du rafra√Æchissement des colonnes: {e}")

    # === SEARCH FUNCTIONALITY ===

    def show_search(self):
        """Show the search interface."""
        try:
            if self.search_frame and self.search_frame.winfo_exists():
                # Search frame already exists, focus on search entry
                return

            # Create search frame
            self.search_frame = tk.Toplevel(self.root)
            self.search_frame.title("üîç Rechercher")
            self.search_frame.geometry("500x300")
            self.search_frame.transient(self.root)
            self.search_frame.configure(bg=Colors.BG_MAIN)

            # Search controls
            controls_frame = tk.Frame(self.search_frame, bg=Colors.BG_MAIN)
            controls_frame.pack(fill="x", padx=10, pady=10)

            tk.Label(controls_frame, text="Rechercher:",
                    bg=Colors.BG_MAIN, fg=Colors.FG_TEXT,
                    font=Fonts.DEFAULT).pack(anchor="w")

            self.search_var = tk.StringVar()
            search_entry = tk.Entry(controls_frame, textvariable=self.search_var,
                                  bg=Colors.EDIT_BG, fg=Colors.EDIT_FG,
                                  font=Fonts.DEFAULT, width=50)
            search_entry.pack(fill="x", pady=(5, 10))
            search_entry.focus()

            # Search buttons
            buttons_frame = tk.Frame(controls_frame, bg=Colors.BG_MAIN)
            buttons_frame.pack(fill="x")

            ttk.Button(buttons_frame, text="Rechercher",
                      command=self.perform_search).pack(side="left", padx=(0, 5))
            ttk.Button(buttons_frame, text="Suivant",
                      command=self.search_next).pack(side="left", padx=5)
            ttk.Button(buttons_frame, text="Pr√©c√©dent",
                      command=self.search_previous).pack(side="left", padx=5)

            # Results area
            results_frame = tk.Frame(self.search_frame, bg=Colors.BG_MAIN)
            results_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

            tk.Label(results_frame, text="R√©sultats:",
                    bg=Colors.BG_MAIN, fg=Colors.FG_TEXT,
                    font=Fonts.DEFAULT).pack(anchor="w")

            # Results listbox
            self.results_listbox = tk.Listbox(results_frame,
                                            bg=Colors.BG_ROW, fg=Colors.FG_TEXT,
                                            font=Fonts.DEFAULT)
            self.results_listbox.pack(fill="both", expand=True, pady=(5, 0))

            # Bind Enter key to search
            search_entry.bind("<Return>", lambda e: self.perform_search())

            logger.info("Interface de recherche affich√©e")

        except Exception as e:
            error_msg = f"‚ùå Erreur lors de l'affichage de la recherche: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def perform_search(self):
        """Perform a search operation."""
        try:
            query = self.search_var.get().strip()
            if not query:
                return

            self.search_results.clear()
            self.current_search_index = -1

            # Clear results listbox
            self.results_listbox.delete(0, tk.END)

            # Search in current data
            if self.data_map.get(self.lang):
                for key, value in self.data_map[self.lang].items():
                    if (query.lower() in key.lower() or
                        query.lower() in str(value).lower()):
                        result = f"{key}: {str(value)[:100]}..."
                        self.search_results.append((key, value))
                        self.results_listbox.insert(tk.END, result)

            # Update status
            count = len(self.search_results)
            self.status.config(text=f"üîç {count} r√©sultat(s) trouv√©(s) pour '{query}'")

            logger.info(f"Recherche effectu√©e: '{query}' - {count} r√©sultats")

        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la recherche: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def search_next(self):
        """Navigate to next search result."""
        if self.search_results:
            self.current_search_index = (self.current_search_index + 1) % len(self.search_results)
            self.results_listbox.selection_clear(0, tk.END)
            self.results_listbox.selection_set(self.current_search_index)
            self.results_listbox.see(self.current_search_index)

    def search_previous(self):
        """Navigate to previous search result."""
        if self.search_results:
            self.current_search_index = (self.current_search_index - 1) % len(self.search_results)
            self.results_listbox.selection_clear(0, tk.END)
            self.results_listbox.selection_set(self.current_search_index)
            self.results_listbox.see(self.current_search_index)

    # === SCRIPT OPERATIONS ===    def run_sync_all(self):
        """Run the sync_all script."""
        try:
            self.status.config(text="‚è≥ Synchronisation de tous les fichiers...")
            # Create a popup to show progress
            popup = self.afficher_popup_chargement("Synchronisation en cours...")

            # Run the sync_all script
            if self.base_dir:
                # Obtenir le chemin correct du script sync_all.py
                script_dir = os.path.dirname(os.path.abspath(__file__))
                sync_all_script = os.path.join(script_dir, "sync_all.py")

                result = subprocess.run([sys.executable, sync_all_script, self.base_dir],
                                      capture_output=True, text=True, cwd=script_dir)
                if result.returncode == 0:
                    self.status.config(text="‚úÖ Synchronisation termin√©e avec succ√®s")
                else:
                    self.status.config(text="‚ùå Erreur lors de la synchronisation")
                    messagebox.showerror("Erreur", f"Erreur de synchronisation:\n{result.stderr}")
            else:
                messagebox.showwarning("Attention", "Veuillez d'abord ouvrir un dossier")
            popup.destroy()
            logger.info("Synchronisation de tous les fichiers termin√©e")

        except Exception as e:
            if 'popup' in locals():
                popup.destroy()
            error_msg = f"‚ùå Erreur lors de la synchronisation: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)
            messagebox.showerror("Erreur", error_msg)

    def run_sync_one(self):
        """Run the sync_one script for a specific file."""
        try:
            filename = self.sync_one_var.get().strip()
            if not filename:
                messagebox.showwarning("Attention", "Veuillez sp√©cifier un nom de fichier")
                return

            # R√©cup√©rer le chemin complet du fichier depuis file_map (comme dans l'ancienne version)
            file_path = self.file_map.get(filename)
            if not file_path or not os.path.exists(file_path):
                error_msg = f"‚ùå Fichier introuvable : {filename}"
                self.status.config(text=error_msg)
                messagebox.showerror("Erreur", error_msg)
                logger.error(error_msg)
                return

            self.status.config(text=f"‚è≥ Synchronisation de {filename}...")
            logger.info(f"üîÑ Lancement de sync_one pour : {file_path}")

            popup = self.afficher_popup_chargement(f"Synchronisation de {filename}...")

            # Passer le chemin complet du fichier comme dans l'ancienne version
            # Obtenir le chemin correct du script sync_one.py
            script_dir = os.path.dirname(os.path.abspath(__file__))
            sync_one_script = os.path.join(script_dir, "sync_one.py")

            result = subprocess.run([sys.executable, sync_one_script, file_path, "--force"],
                                  capture_output=True, text=True, cwd=script_dir)
            if result.returncode == 0:
                self.status.config(text=f"‚úÖ Synchronisation de {filename} termin√©e")
                logger.info(f"‚úÖ Synchronisation r√©ussie : {file_path}")
            else:
                self.status.config(text=f"‚ùå Erreur lors de la synchronisation de {filename}")
                error_details = f"Erreur de synchronisation:\n{result.stderr}\n\nSortie:\n{result.stdout}"
                messagebox.showerror("Erreur", error_details)
                logger.error(f"‚ùå Erreur sync_one: {result.stderr}")

            popup.destroy()
            logger.info(f"Synchronisation de {filename} termin√©e")

        except Exception as e:
            if 'popup' in locals():
                popup.destroy()
            error_msg = f"‚ùå Erreur lors de la synchronisation: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def run_generer_fichier(self):
        """Run the generer_fichier script."""
        try:
            filename = self.genfichier_file_var.get().strip()
            src_lang = self.genfichier_src_var.get().strip()
            tgt_lang = self.genfichier_tgt_var.get().strip()

            if not all([filename, src_lang, tgt_lang]):
                messagebox.showwarning("Attention", "Veuillez remplir tous les champs")
                return

            self.status.config(text=f"‚è≥ G√©n√©ration de {filename} ({src_lang} ‚Üí {tgt_lang})...")

            popup = self.afficher_popup_chargement("G√©n√©ration en cours...")

            # Obtenir le chemin correct du script generer_fichier.py
            script_dir = os.path.dirname(os.path.abspath(__file__))
            generer_fichier_script = os.path.join(script_dir, "generer_fichier.py")

            result = subprocess.run([sys.executable, generer_fichier_script, filename, src_lang, tgt_lang],
                                  capture_output=True, text=True, cwd=script_dir)
            if result.returncode == 0:
                self.status.config(text=f"‚úÖ G√©n√©ration de {filename} termin√©e")
            else:
                self.status.config(text=f"‚ùå Erreur lors de la g√©n√©ration de {filename}")
                messagebox.showerror("Erreur", f"Erreur de g√©n√©ration:\n{result.stderr}")

            popup.destroy()
            logger.info(f"G√©n√©ration de {filename} termin√©e")        except Exception as e:
            if 'popup' in locals():
                popup.destroy()
            error_msg = f"‚ùå Erreur lors de la g√©n√©ration: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def run_generer_manquant(self):
        """Run the generer_manquant script."""
        try:
            self.status.config(text="‚è≥ G√©n√©ration des fichiers manquants...")
            popup = self.afficher_popup_chargement("G√©n√©ration des fichiers manquants...")

            # Obtenir le chemin correct du script generer_manquant.py
            script_dir = os.path.dirname(os.path.abspath(__file__))
            generer_manquant_script = os.path.join(script_dir, "generer_manquant.py")

            result = subprocess.run([sys.executable, generer_manquant_script],
                                  capture_output=True, text=True, cwd=script_dir)
            if result.returncode == 0:
                self.status.config(text="‚úÖ G√©n√©ration des fichiers manquants termin√©e")
            else:
                self.status.config(text="‚ùå Erreur lors de la g√©n√©ration des fichiers manquants")
                messagebox.showerror("Erreur", f"Erreur de g√©n√©ration:\n{result.stderr}")

            popup.destroy()
            logger.info("G√©n√©ration des fichiers manquants termin√©e")

        except Exception as e:
            if 'popup' in locals():
                popup.destroy()
            error_msg = f"‚ùå Erreur lors de la g√©n√©ration: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def run_check_coherence(self):
        """Run the check_coherence script."""
        try:
            self.status.config(text="‚è≥ V√©rification de la coh√©rence...")

            popup = self.afficher_popup_chargement("V√©rification de la coh√©rence...")

            result = subprocess.run([sys.executable, "check_coherence.py"],
                                  capture_output=True, text=True, cwd=".")
            if result.returncode == 0:
                self.status.config(text="‚úÖ V√©rification de la coh√©rence termin√©e")
                if result.stdout:
                    messagebox.showinfo("R√©sultat", f"V√©rification termin√©e:\n{result.stdout}")
            else:
                self.status.config(text="‚ùå Erreur lors de la v√©rification")
                messagebox.showerror("Erreur", f"Erreur de v√©rification:\n{result.stderr}")

            popup.destroy()
            logger.info("V√©rification de la coh√©rence termin√©e")

        except Exception as e:
            if 'popup' in locals():
                popup.destroy()
            error_msg = f"‚ùå Erreur lors de la v√©rification: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def run_spell_check(self):
        """Run the spell check script."""
        try:
            self.status.config(text="‚è≥ V√©rification de l'orthographe...")

            popup = self.afficher_popup_chargement("V√©rification de l'orthographe...")

            result = subprocess.run([sys.executable, "verifier_orthographe.py"],
                                  capture_output=True, text=True, cwd=".")
            if result.returncode == 0:
                self.status.config(text="‚úÖ V√©rification de l'orthographe termin√©e")
                if result.stdout:
                    messagebox.showinfo("R√©sultat", f"V√©rification termin√©e:\n{result.stdout}")
            else:
                self.status.config(text="‚ùå Erreur lors de la v√©rification orthographique")
                messagebox.showerror("Erreur", f"Erreur de v√©rification:\n{result.stderr}")

            popup.destroy()
            logger.info("V√©rification de l'orthographe termin√©e")

        except Exception as e:
            if 'popup' in locals():
                popup.destroy()
            error_msg = f"‚ùå Erreur lors de la v√©rification: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def load_flat_mode(self, file_path):
        """Load flat JSON files and display them in the main canvas instead of a popup window."""
        try:
            # Determine the base directory and file paths
            base_dir = os.path.dirname(file_path)

            # Force use of fr.json, en.json, es.json in the same directory
            fr_path = os.path.join(base_dir, "fr.json")
            en_path = os.path.join(base_dir, "en.json")
            es_path = os.path.join(base_dir, "es.json")

            logger.info(f"Loading flat JSON files: {fr_path}, {en_path}, {es_path}")

            # Helper function to load or create files
            def load_or_create(path):
                if os.path.exists(path):
                    try:
                        with open(path, "r", encoding="utf-8") as f:
                            content = f.read()
                            if not content.strip():
                                logger.warning(f"File {os.path.basename(path)} is empty")
                                return {}

                            data = json.loads(content)
                            if not isinstance(data, dict):
                                logger.warning(f"File {os.path.basename(path)} is not a valid JSON dictionary")
                                return {}
                            logger.info(f"File {os.path.basename(path)} loaded with {len(data)} keys")
                            return data
                    except json.JSONDecodeError as e:
                        logger.error(f"JSON decode error for {path}: {e}")
                        return {}
                    except Exception as e:
                        logger.error(f"Error reading {path}: {e}")
                        return {}
                else:
                    logger.info(f"File {os.path.basename(path)} doesn't exist, creating...")
                    with open(path, "w", encoding="utf-8") as f:
                        json.dump({}, f, indent=2, ensure_ascii=False)
                    return {}

            # Load the files
            fr_data = load_or_create(fr_path)
            en_data = load_or_create(en_path)
            es_data = load_or_create(es_path)

            # Get all unique keys
            all_keys = set(fr_data.keys()) | set(en_data.keys()) | set(es_data.keys())
            all_keys = sorted(list(all_keys))
              # Clear the main canvas and show flat editor in the main interface
            self.clear_main_canvas()

            # Use the flat editor to display as popup window (correct method name)
            self.flat_editor.show_flat_json_editor(
                fr_path, en_path, es_path,
                fr_data, en_data, es_data,
                all_keys
            )

            logger.info(f"Flat JSON editor loaded with {len(all_keys)} keys")
            self.status.config(text=f"‚úÖ √âditeur JSON plat: {len(all_keys)} cl√©s trouv√©es")

        except Exception as e:
            error_msg = f"‚ùå Erreur lors du chargement en mode plat: {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)
            messagebox.showerror("Erreur", error_msg)

    def clear_main_canvas(self):
        """Clear the main canvas for flat mode display."""
        try:
            # Clear existing columns
            for col in self.columns:
                col.destroy()
            self.columns.clear()
              # Clear any widgets in the main canvas
            for widget in self.main_canvas.winfo_children():
                widget.destroy()

            self.main_canvas.configure(scrollregion=())
            logger.info("Main canvas cleared for flat mode")

        except Exception as e:
            logger.error(f"Erreur lors du nettoyage du canvas principal: {e}")

    def afficher_popup_chargement(self, message="Traitement en cours..."):
        """Display a loading popup with the given message."""
        popup = tk.Toplevel(self.root)
        popup.title("Veuillez patienter")
        popup.geometry("300x100")
        popup.transient(self.root)
        popup.grab_set()  # Bloque les interactions avec la fen√™tre principale
        popup.resizable(False, False)
        popup.configure(bg=Colors.BG_MAIN)

        tk.Label(popup, text=message, font=Fonts.DEFAULT,
                bg=Colors.BG_MAIN, fg=Colors.FG_TEXT).pack(pady=20)

        self.root.update_idletasks()
        return popup

    def reload_root(self, event=None):
        """Reload the complete interface from the root."""
        try:
            # Save current state
            old_lang = self.lang
            old_path = self.current_path[:]

            # Reload from root
            self.load_root()            # Try to restore previous path
            try:
                self.rebuild_columns_for_path()
                self.status.config(text="‚úÖ Interface recharg√©e")
            except Exception as e:
                logger.warning(f"Erreur lors de la restauration du chemin : {e}")
                # Stay at root on error
                self.status.config(text="‚úÖ Interface recharg√©e (racine)")
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du rechargement : {e}"
            self.status.config(text=error_msg)
            logger.error(error_msg)

    def rebuild_columns_for_path(self):
        """Rebuild columns for the current path."""
        try:
            logger.info(f"üîß Reconstruction des colonnes pour le chemin: {self.current_path}")

            # Start with the root level
            partial_path = [0, 255, 255, 255]
            self.load_level(partial_path, 0)

            # Progressively load additional levels based on current_path
            if self.current_path[1] != 255:
                partial_path[1] = self.current_path[1]
                partial_path[2] = 255
                partial_path[3] = 255
                self.load_level(partial_path, 1)

                if self.current_path[2] != 255:
                    partial_path[2] = self.current_path[2]
                    partial_path[3] = 255
                    self.load_level(partial_path, 2)

                    if self.current_path[3] != 255:
                        partial_path[3] = self.current_path[3]
                        self.load_level(partial_path, 3)

            # Scroll to top of the canvas
            self.main_canvas.yview_moveto(0.0)

            logger.info("‚úÖ Reconstruction des colonnes termin√©e")

        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la reconstruction des colonnes: {e}"
            logger.error(error_msg)
            self.status.config(text=error_msg)

    def unmake_editable(self):
        """Exit edit mode and restore row to readonly mode."""
        if not self.editing_info:
            return

        row = self.editing_info["row"]
        fault = self.editing_info["fault"]
        idx = self.editing_info["idx"]
        filename = self.editing_info["filename"]
        path = self.editing_info["path"]
        level = self.editing_info["level"]

        try:
            # Check if the widget still exists before trying to render it
            row.winfo_exists()
            self.render_row(row, fault, idx, path, level, filename)
            logger.info(f"üîô Mode √©dition quitt√© pour l'item {idx} dans {filename}")
        except tk.TclError:
            # Widget has been destroyed (e.g., during language change), just clear the editing info
            logger.debug("Widget d√©truit pendant l'√©dition, nettoyage des infos d'√©dition")
            pass
        except Exception as e:
            logger.error(f"Erreur lors de la sortie du mode √©dition: {e}")

        self.editing_info = None

    def cleanup(self):
        """Cleanup method called when application closes."""
        try:
            logger.info("üßπ Cleaning up application resources")

            # Close search window if open
            if hasattr(self, 'search_frame') and self.search_frame and self.search_frame.winfo_exists():
                self.search_frame.destroy()

            # Save any pending changes
            # (implement as needed)

            logger.info("‚úÖ Cleanup completed")
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage: {e}")


# Legacy compatibility function
def create_fault_editor(root):
    """Create a FaultEditorController instance for legacy compatibility."""
    return FaultEditorController(root)

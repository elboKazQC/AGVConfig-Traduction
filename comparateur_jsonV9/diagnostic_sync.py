#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script pour diagnostiquer les probl√®mes de synchronisation dans les fichiers JSON.
D√©tecte les incoh√©rences o√π des entr√©es vides dans les masters g√©n√®rent des traductions.
"""

import os
import json
import glob
from pathlib import Path

def diagnostiquer_dossier(dossier_json):
    """
    Diagnostique tous les fichiers JSON dans un dossier pour d√©tecter les probl√®mes de synchronisation.

    Args:
        dossier_json: Chemin vers le dossier contenant les fichiers JSON
    """
    if not os.path.exists(dossier_json):
        print(f"‚ùå Dossier introuvable : {dossier_json}")
        return False

    # Trouver tous les fichiers fran√ßais (master)
    pattern_fr = os.path.join(dossier_json, "**", "*_fr.json")
    fichiers_fr = glob.glob(pattern_fr, recursive=True)

    if not fichiers_fr:
        print(f"‚ùå Aucun fichier fran√ßais trouv√© dans : {dossier_json}")
        return False

    print(f"üîç Diagnostic de {len(fichiers_fr)} fichiers ma√Ætres fran√ßais...")
    print("=" * 80)

    problemes_totaux = 0

    for fichier_fr in sorted(fichiers_fr):
        print(f"\nüìÑ Analyse de : {os.path.relpath(fichier_fr, dossier_json)}")

        try:
            # Charger le fichier fran√ßais
            with open(fichier_fr, 'r', encoding='utf-8') as f:
                data_fr = json.load(f)

            # D√©terminer les fichiers cibles
            fichier_en = fichier_fr.replace('_fr.json', '_en.json')
            fichier_es = fichier_fr.replace('_fr.json', '_es.json')

            # Diagnostiquer chaque langue cible
            for lang, fichier_target in [('EN', fichier_en), ('ES', fichier_es)]:
                if not os.path.exists(fichier_target):
                    print(f"  ‚ö†Ô∏è Fichier {lang} manquant : {os.path.basename(fichier_target)}")
                    continue

                # Charger le fichier cible
                with open(fichier_target, 'r', encoding='utf-8') as f:
                    data_target = json.load(f)

                # Analyser les FaultDetailList
                fault_list_fr = data_fr.get("FaultDetailList", [])
                fault_list_target = data_target.get("FaultDetailList", [])

                problemes_fichier = []

                for i, fault_fr in enumerate(fault_list_fr):
                    if i >= len(fault_list_target):
                        break

                    desc_fr = fault_fr.get("Description", "").strip()
                    desc_target = fault_list_target[i].get("Description", "").strip()

                    # Probl√®me 1: Entr√©e fran√ßaise vide mais traduction non vide
                    if not desc_fr and desc_target:
                        problemes_fichier.append({
                            'type': 'entr√©e_vide_traduite',
                            'index': i,
                            'fr': desc_fr,
                            'target': desc_target
                        })

                    # Probl√®me 2: Traductions suspectes (messages d'erreur AI)
                    if desc_target and any(phrase in desc_target.lower() for phrase in [
                        "lo siento", "sorry", "i can't", "je ne peux pas"
                    ]):
                        problemes_fichier.append({
                            'type': 'traduction_suspecte',
                            'index': i,
                            'fr': desc_fr,
                            'target': desc_target
                        })

                    # Probl√®me 3: Traductions manifestement incorrectes
                    if desc_fr == "chat" and desc_target not in ["cat", "gato"]:
                        problemes_fichier.append({
                            'type': 'traduction_incorrecte',
                            'index': i,
                            'fr': desc_fr,
                            'target': desc_target,
                            'attendue': "cat" if lang == "EN" else "gato"
                        })

                # Afficher les probl√®mes trouv√©s
                if problemes_fichier:
                    print(f"  üö® {len(problemes_fichier)} probl√®me(s) d√©tect√©(s) en {lang} :")
                    for prob in problemes_fichier:
                        if prob['type'] == 'entr√©e_vide_traduite':
                            print(f"    [Index {prob['index']}] Entr√©e vide traduite : '' ‚Üí '{prob['target']}'")
                        elif prob['type'] == 'traduction_suspecte':
                            print(f"    [Index {prob['index']}] Traduction suspecte : '{prob['fr']}' ‚Üí '{prob['target']}'")
                        elif prob['type'] == 'traduction_incorrecte':
                            print(f"    [Index {prob['index']}] Traduction incorrecte : '{prob['fr']}' ‚Üí '{prob['target']}' (attendue: '{prob['attendue']}')")

                    problemes_totaux += len(problemes_fichier)
                else:
                    print(f"  ‚úÖ Fichier {lang} correct")

        except Exception as e:
            print(f"  ‚ùå Erreur lors de l'analyse : {e}")
            continue

    print("\n" + "=" * 80)
    if problemes_totaux > 0:
        print(f"üö® R√âSUM√â : {problemes_totaux} probl√®me(s) de synchronisation d√©tect√©(s)")
        print("\nüí° Pour corriger, utilisez :")
        print("   python corriger_sync.py <fichier_fr.json>")
    else:
        print("‚úÖ R√âSUM√â : Aucun probl√®me de synchronisation d√©tect√©")

    return problemes_totaux == 0

def main():
    import argparse

    parser = argparse.ArgumentParser(
        description='Diagnostique les probl√®mes de synchronisation dans les fichiers JSON'
    )
    parser.add_argument('dossier', nargs='?',
                       default="../JSON",
                       help='Dossier contenant les fichiers JSON √† diagnostiquer (d√©faut: ../JSON)')

    args = parser.parse_args()

    success = diagnostiquer_dossier(args.dossier)
    exit(0 if success else 1)

if __name__ == "__main__":
    main()
